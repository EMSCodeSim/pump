workflows:
  ios_release:
    name: FireOpsCalc iOS Release
    instance_type: mac_mini_m2
    max_build_duration: 60

    integrations:
      app_store_connect: FireCalc

    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        WORKSPACE: "ios/App/App.xcworkspace"
        SCHEME: "App"
        BUNDLE_ID: "com.fireopscalc.app"
        ARCHIVE_PATH: "/Users/builder/clone/build/App.xcarchive"
        EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

      # üëá MUST match Codemagic UI exactly
      ios_signing:
        certificates:
          # use the name Codemagic said is available
          - FireCalcCertiicate
        provisioning_profiles:
          - FireOpsCalcApp_AppStore
          - FireOpsCalcprofile

    scripts:
      - name: 1) Install Node deps & build web
        script: |
          set -e
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci || npm install
            else
              npm install
            fi
            npm run build --if-present
          else
            echo "No package.json, skipping web build."
          fi

      - name: 2) Capacitor sync iOS
        script: |
          set -e
          if [ -f capacitor.config.ts ] || [ -f capacitor.config.json ] || [ -f capacitor.config.js ]; then
            npx cap sync ios
          else
            echo "No capacitor config, skipping npx cap sync ios"
          fi
          echo "=== ios/App/App after sync ==="
          ls -la ios/App/App || true

      - name: 3) Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update || pod install
          cd ../..

      - name: 4) Fetch from App Store Connect (positional arg) + show what CM mounted
        script: |
          echo "=== 4a) fetch APP STORE profile for com.fireopscalc.app ==="
          app-store-connect fetch-signing-files com.fireopscalc.app \
            --type IOS_APP_STORE \
            --create \
            || echo "‚ö†Ô∏è app store fetch failed (will continue)"

          echo "=== 4b) fetch DEV profile (optional) ==="
          app-store-connect fetch-signing-files com.fireopscalc.app \
            --type IOS_APP_DEVELOPMENT \
            --create \
            || echo "‚ö†Ô∏è dev fetch failed (will continue)"

          echo "=== 4c) import certs CM mounted ==="
          keychain add-certificates || echo "‚ö†Ô∏è no certs imported"

          echo "=== 4d) apply profiles to Xcode project (best-effort) ==="
          xcode-project use-profiles || echo "‚ö†Ô∏è xcode-project use-profiles failed (usually: no profiles)"

          echo "=== 4e) list CM_PROVISIONING_PROFILES_DIR ==="
          echo "CM_PROVISIONING_PROFILES_DIR=$CM_PROVISIONING_PROFILES_DIR"
          if [ -n "$CM_PROVISIONING_PROFILES_DIR" ] && [ -d "$CM_PROVISIONING_PROFILES_DIR" ]; then
            ls -R "$CM_PROVISIONING_PROFILES_DIR" || true
          else
            echo "‚ùå CM didn‚Äôt mount any profiles ‚Äî check names in ios_signing: against Code signing page"
          fi

          echo "=== 4f) ASC profiles (diagnostic) ==="
          app-store-connect profiles --json || true
          echo "=== 4g) ASC certificates (diagnostic) ==="
          app-store-connect certificates --json || true

      - name: 5) Create ExportOptions.plist (App Store Connect)
        script: |
          set -e
          EXPORT_PLIST="/Users/builder/export_options.plist"
          rm -f "$EXPORT_PLIST"
          /usr/bin/plutil -create xml1 "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :method string app-store-connect" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :teamID string QZ55W58398" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :uploadBitcode bool false" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :compileBitcode bool false" "$EXPORT_PLIST"
          echo "=== ExportOptions.plist ==="
          /usr/libexec/PlistBuddy -c "Print" "$EXPORT_PLIST"

      - name: 6) Archive with Xcode (use workspace + scheme)
        script: |
          set -e
          echo "=== xcodebuild archive ==="
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            | xcpretty

          if [ ! -d "$ARCHIVE_PATH" ]; then
            echo "‚ùå Archive was not created at $ARCHIVE_PATH"
            ls -R /Users/builder/clone/build || true
            exit 1
          fi

      - name: 7) Export IPA
        script: |
          set -e
          mkdir -p "$EXPORT_DIR"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist /Users/builder/export_options.plist \
            -exportPath "$EXPORT_DIR" \
            | xcpretty

          IPA_PATH="$(ls -1t "$EXPORT_DIR"/*.ipa 2>/dev/null | head -n 1)"
          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå No IPA created"
            ls -la "$EXPORT_DIR" || true
            exit 1
          fi

          mv -f "$IPA_PATH" "$EXPORT_DIR/$IPA_NAME"
          echo "‚úÖ IPA at $EXPORT_DIR/$IPA_NAME"

    artifacts:
      - "$EXPORT_DIR/$IPA_NAME"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testers
