workflows:
  ios_release:
    name: iOS Release (App Store / TestFlight)
    max_build_duration: 60
    instance_type: mac_mini_m2

    integrations:
      app_store_connect: "FireOpsCalc_iOS-KEY"   # from your App settings â†’ Integrations

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        XCODE_WORKSPACE: ios/App/App.xcworkspace
        XCODE_SCHEME: App

        PRODUCT_BUNDLE_IDENTIFIER: com.fireopscalc.app
        DEVELOPMENT_TEAM: QZ55W58398

        ARCHIVE_PATH: /Users/builder/clone/build/App.xcarchive

    scripts:
      - name: Show tool versions
        script: |
          set -e
          node -v
          npm -v
          pod --version
          xcodebuild -version

      - name: Install dependencies
        script: |
          set -e
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Build web assets (try common scripts)
        script: |
          set -e
          if npm run | grep -qE '(^|\s)build(\s|:)'; then
            npm run build
          elif npm run | grep -qE '(^|\s)build:web(\s|:)'; then
            npm run build:web
          else
            echo "No build script found, skipping web asset build."
          fi

      - name: Sync Capacitor iOS
        script: |
          set -e
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod install --repo-update
          cd -

      # ðŸ”‘ Fetch/CREATE signing files via your App Store Connect integration (no .p12 needed)
      - name: Fetch signing files from App Store Connect
        script: |
          set -e
          app-store-connect fetch-signing-files \
            --type IOS_APP_STORE \
            --bundle-id "$PRODUCT_BUNDLE_IDENTIFIER" \
            --create
          # Apply the fetched profiles to the Xcode project; don't fail if it just warns
          xcode-project use-profiles --warn-only

      - name: Build iOS archive (Release)
        script: |
          set -e
          mkdir -p "$(dirname "$ARCHIVE_PATH")"
          echo "Building archive to: $ARCHIVE_PATH"
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -derivedDataPath /Users/builder/clone/DerivedData \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$PRODUCT_BUNDLE_IDENTIFIER" \
            -allowProvisioningUpdates \
            clean archive | xcpretty
          ls -la "$(dirname "$ARCHIVE_PATH")"

      - name: Export IPA (App Store)
        script: |
          set -e
          xcode-project build-ipa \
            --archive-path "$ARCHIVE_PATH" \
            --export-method app-store
          ls -la Export || true

    artifacts:
      - build/ios/ipa/*.ipa
      - $ARCHIVE_PATH
      - Export/*.ipa
      - Export/*.dSYM.zip
      - /tmp/xcodebuild_logs/*.log

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        # beta_groups:
        #   - Internal Testing
