workflows:
  ios_release:
    name: iOS Release Build & Upload
    instance_type: mac_mini_m2
    max_build_duration: 60

    integrations:
      app_store_connect: FireCalc   # <- your Codemagic ASC integration name

    environment:
      xcode: 16.4
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.fireopscalc.app   # <- EXACT bundle id
      vars:
        DEVELOPMENT_TEAM: QZ55W58398
        XCODE_WORKSPACE: ios/App/App.xcworkspace
        XCODE_SCHEME: App
        ARCHIVE_PATH: $CM_BUILD_DIR/build/App.xcarchive
        EXPORT_PATH: $CM_BUILD_DIR/Export
        EXPECTED_BUNDLE_ID: com.fireopscalc.app

    cache:
      cache_paths:
        - ~/.npm
        - ~/Library/Caches/CocoaPods
        - ios/Pods -> ios/Podfile.lock
        - ios/App/Pods -> ios/App/Podfile.lock

    scripts:
      - name: Install Node dependencies
        script: |
          npm ci || npm install

      - name: Capacitor sync (push correct bundle id into Xcode)
        script: |
          # Ensure BOTH of these are set in your repo:
          #   ios/App/capacitor.config.json -> "appId": "com.fireopscalc.app"
          #   ios/App/config.xml            -> <widget id="com.fireopscalc.app" ...>
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          if [ -f "ios/App/Podfile" ]; then
            cd ios/App && pod install
          elif [ -f "ios/Podfile" ]; then
            cd ios && pod install
          else
            echo "No Podfile found (ok if project doesn't use Pods)"
          fi

      - name: Apply signing from Codemagic (profiles + certs)
        script: |
          # This installs the correct App Store profile & certificate
          xcode-project use-profiles
          echo "Installed provisioning profiles:"
          ls -l "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      - name: Build archive (Manual signing; no explicit profile args)
        script: |
          xcodebuild -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PRODUCT_BUNDLE_IDENTIFIER="$EXPECTED_BUNDLE_ID"

      - name: Verify archive bundle id and embedded profile
        script: |
          APP="$ARCHIVE_PATH/Products/Applications/App.app"
          INFO_PLIST="$APP/Info.plist"
          if [ ! -f "$INFO_PLIST" ]; then
            echo "Missing $INFO_PLIST"; ls -R "$ARCHIVE_PATH"; exit 1
          fi
          ACTUAL=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$INFO_PLIST" 2>/dev/null || true)
          echo "Archived CFBundleIdentifier: '$ACTUAL'"
          if [ "$ACTUAL" != "$EXPECTED_BUNDLE_ID" ]; then
            echo "ERROR: Archive bundle id ('$ACTUAL') != '$EXPECTED_BUNDLE_ID'"; exit 1
          fi
          if [ ! -f "$APP/embedded.mobileprovision" ]; then
            echo "ERROR: embedded.mobileprovision is missing in archive"; exit 1
          fi
          echo "Embedded profile summary:"
          /usr/bin/security cms -D -i "$APP/embedded.mobileprovision" > /tmp/_emb.plist
          /usr/libexec/PlistBuddy -c 'Print :Name' /tmp/_emb.plist || true
          /usr/libexec/PlistBuddy -c 'Print :UUID' /tmp/_emb.plist || true
          /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /tmp/_emb.plist || true

      - name: Create ExportOptions.plist (no provisioningProfiles)
        script: |
          cat <<EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>$DEVELOPMENT_TEAM</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadSymbols</key>
            <true/>
            <key>manageAppVersionAndBuildNumber</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
          echo "=== ExportOptions.plist ==="
          cat ExportOptions.plist

      - name: Export IPA
        script: |
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$EXPORT_PATH"

    artifacts:
      - Export/*.ipa
      - $CM_BUILD_DIR/build/*.xcarchive

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
