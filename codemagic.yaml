workflows:
  ios_release:
    name: FireOpsCalc iOS Release
    instance_type: mac_mini_m2
    max_build_duration: 60

    triggering:
      events:workflows:
  ios_release:
    name: iOS Release Build & Upload
    instance_type: mac_mini_m2
    max_build_duration: 60

    integrations:
      app_store_connect: FireCalc   # Codemagic ASC integration name

    environment:
      xcode: 16.4
      ios_signing:
        certificates:
          - FireCalcCertiicate      # EXACT reference from Codemagic (one 't', two 'i')
        provisioning_profiles:
          - FireOpsCalcprofile      # EXACT reference from Codemagic
      vars:
        DEVELOPMENT_TEAM: QZ55W58398
        EXPECTED_BUNDLE_ID: com.fireopscalc.app
        XCODE_WORKSPACE: ios/App/App.xcworkspace
        XCODE_SCHEME: App
        ARCHIVE_PATH: $CM_BUILD_DIR/build/App.xcarchive
        EXPORT_PATH: $CM_BUILD_DIR/Export

    cache:
      cache_paths:
        - ~/.npm
        - ios/Pods -> ios/Podfile.lock
        - ios/App/Pods -> ios/App/Podfile.lock

    scripts:
      - name: Install Node dependencies
        script: |
          npm ci || npm install

      - name: Capacitor sync (ensure bundle id flows into Xcode)
        script: |
          # Repo should have:
          #   ios/App/capacitor.config.json -> "appId": "com.fireopscalc.app"
          #   ios/App/config.xml            -> <widget id="com.fireopscalc.app" ...>
          npx cap sync ios
          cat ios/App/capacitor.config.json || true

      - name: Install CocoaPods (if present)
        script: |
          if [ -f "ios/App/Podfile" ]; then
            cd ios/App && pod install
          elif [ -f "ios/Podfile" ]; then
            cd ios && pod install
          else
            echo "No Podfile found (ok if not using Pods)"
          fi

      - name: Install referenced signing assets (certificate + profile)
        script: |
          xcode-project use-profiles
          echo "Profiles installed:"
          ls -l "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      - name: Build archive (manual signing)
        script: |
          xcodebuild -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PRODUCT_BUNDLE_IDENTIFIER="$EXPECTED_BUNDLE_ID" \
            CODE_SIGNING_ALLOWED=YES | xcpretty

      - name: Validate archive signing
        script: |
          APP="$ARCHIVE_PATH/Products/Applications/App.app"
          INFO_PLIST="$APP/Info.plist"
          if [ ! -f "$INFO_PLIST" ]; then
            echo "Missing $INFO_PLIST"; ls -R "$ARCHIVE_PATH"; exit 1
          fi
          BUNDLE=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$INFO_PLIST" 2>/dev/null || true)
          echo "Archived CFBundleIdentifier: $BUNDLE"
          [ "$BUNDLE" = "$EXPECTED_BUNDLE_ID" ] || { echo "Bundle id mismatch"; exit 1; }

          if [ ! -f "$APP/embedded.mobileprovision" ]; then
            echo "‚ùå Missing embedded.mobileprovision (profile not embedded)"; exit 1
          fi

          security cms -D -i "$APP/embedded.mobileprovision" > /tmp/prov.plist
          echo "‚úÖ Embedded profile name:"
          /usr/libexec/PlistBuddy -c "Print :Name" /tmp/prov.plist || true
          echo "‚úÖ Embedded profile UUID:"
          /usr/libexec/PlistBuddy -c "Print :UUID" /tmp/prov.plist || true
          echo "‚úÖ Embedded application-identifier:"
          /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /tmp/prov.plist || true

      - name: Create ExportOptions.plist (no provisioningProfiles map)
        script: |
          cat <<EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store-connect</string>
            <key>teamID</key><string>$DEVELOPMENT_TEAM</string>
            <key>stripSwiftSymbols</key><true/>
            <key>uploadSymbols</key><true/>
            <key>manageAppVersionAndBuildNumber</key><false/>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF
          cat ExportOptions.plist

      - name: Export IPA
        script: |
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$EXPORT_PATH" | xcpretty

    artifacts:
      - Export/*.ipa
      - $CM_BUILD_DIR/build/*.xcarchive

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true

        - push
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true

    integrations:
      app_store_connect: FireCalc

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        WORKSPACE: "ios/App/App.xcworkspace"
        SCHEME: "App"
        CONFIGURATION: "Release"
        DEVELOPMENT_TEAM: "QZ55W58398"
        PRODUCT_BUNDLE_IDENTIFIER: "com.fireopscalc.app"

        # üëá this is the ONLY profile Codemagic has
        PROVISIONING_PROFILE_SPECIFIER: "FireOpsCalcprofile"

        ARCHIVE_PATH: "/Users/builder/clone/build/App.xcarchive"
        EXPORT_DIR: "/Users/builder/clone/Export/export_tmp"
        IPA_EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

      ios_signing:
        certificates:
          - FireCalcCertiicate
        provisioning_profiles:
          - FireOpsCalcprofile

    scripts:
      - name: Install Node deps & build web (if present)
        script: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci || npm install
            else
              npm install
            fi
            npm run build --if-present
          else
            echo "No package.json, skipping web build."
          fi

      - name: Capacitor sync iOS
        script: |
          if [ -f capacitor.config.ts ] || [ -f capacitor.config.json ] || [ -f capacitor.config.js ]; then
            npx cap sync ios
          else
            echo "No capacitor.config.* found ‚Äî assuming native files already in place."
          fi
          ls -la ios/App/App/ || true

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod install --repo-update || pod install
          cd ../..

      - name: Create ExportOptions.plist (use FireOpsCalcprofile)
        script: |
          set -e
          EXPORT_PLIST="/Users/builder/ExportOptions.plist"
          rm -f "$EXPORT_PLIST"
          /usr/bin/plutil -create xml1 "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :method string app-store" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :signingStyle string manual" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :teamID string $DEVELOPMENT_TEAM" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$PRODUCT_BUNDLE_IDENTIFIER string $PROVISIONING_PROFILE_SPECIFIER" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :compileBitcode bool false" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :uploadBitcode bool false" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Print" "$EXPORT_PLIST" || true

      - name: Archive with xcodebuild (force our profile, clear the old one)
        script: |
          set -e
          echo "=== ARCHIVE: using profile from Codemagic: $PROVISIONING_PROFILE_SPECIFIER ==="
          rm -rf "$ARCHIVE_PATH"

          # Try manual with OUR profile and CLEAR legacy one
          set +e
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination 'generic/platform=iOS' \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$PRODUCT_BUNDLE_IDENTIFIER" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
            PROVISIONING_PROFILE="" \
            archive
          STATUS=$?
          set -e

          if [ $STATUS -ne 0 ] || [ ! -d "$ARCHIVE_PATH" ]; then
            echo "‚ùå Manual archive with cleared profile failed. Showing build settings for target:"
            xcodebuild -showBuildSettings -workspace "$WORKSPACE" -scheme "$SCHEME" | grep -E 'PROVISIONING_PROFILE|PROVISIONING_PROFILE_SPECIFIER|CODE_SIGN|PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM' || true
            exit 1
          fi

          echo "‚úÖ Archive created at $ARCHIVE_PATH"

      - name: Export IPA
        script: |
          set -e
          mkdir -p "$EXPORT_DIR" "$IPA_EXPORT_DIR"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist /Users/builder/ExportOptions.plist \
            -exportPath "$EXPORT_DIR"

          IPA_PATH="$(ls -1t "$EXPORT_DIR"/*.ipa 2>/dev/null | head -n 1)"
          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå Export did not produce an IPA. Contents of $EXPORT_DIR:"
            ls -la "$EXPORT_DIR" || true
            exit 1
          fi
          mv -f "$IPA_PATH" "$IPA_EXPORT_DIR/$IPA_NAME"
          echo "‚úÖ Exported: $IPA_EXPORT_DIR/$IPA_NAME"

    artifacts:
      - "$IPA_EXPORT_DIR/$IPA_NAME"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testers
