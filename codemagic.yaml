workflows:
  ios_release:
    name: FireOpsCalc iOS Release
    instance_type: mac_mini_m2
    max_build_duration: 60

    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true

    integrations:
      app_store_connect: FireCalc

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        # Xcode / app metadata
        PRODUCT_BUNDLE_IDENTIFIER: "com.fireopscalc.app"
        DEVELOPMENT_TEAM: "QZ55W58398"
        WORKSPACE: "ios/App/App.xcworkspace"
        SCHEME: "App"

        # Web build config (adjust if your project uses different commands/dirs)
        WEB_BUILD_CMD: "npm run build"
        WEB_DIR: "www"   # falls back to dist/build/www if not found
        IPA_EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

      ios_signing:
        certificates:
          - FireCalcCertiicate
        provisioning_profiles:
          - FireOpsCalcprofile

    scripts:
      - name: Install Node dependencies & build web assets
        script: |
          if [ -f package.json ]; then
            echo "Installing Node deps..."
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci || npm install
            else
              npm install
            fi
            echo "Building web assets..."
            if ! ${WEB_BUILD_CMD}; then
              echo "Primary WEB_BUILD_CMD failed, trying fallbacks..."
              npm run build:prod || npm run build:ios || npm run build --if-present || true
            fi
          else
            echo "No package.json found, skipping web build."
          fi

      - name: Ensure Capacitor CLI & sync iOS
        script: |
          # Use npx to avoid global installs
          if [ -f capacitor.config.ts ] || [ -f capacitor.config.json ] || [ -f capacitor.config.js ]; then
            echo "Running Capacitor sync..."
            npx cap sync ios
          else
            echo "No capacitor.config.* in repo root. If you are using Capacitor, add it so sync can generate iOS assets."
          fi

          # Determine a built web dir to copy (try WEB_DIR, then common fallbacks)
          FOUND_WEB=""
          for d in "$WEB_DIR" dist build www; do
            if [ -d "$d" ] && [ -n "$(ls -A "$d" 2>/dev/null)" ]; then
              FOUND_WEB="$d"
              break
            fi
          done

          # Fallback: if ios/App/App/public missing but built assets exist, copy them
          if [ ! -d "ios/App/App/public" ]; then
            echo "ios/App/App/public not found."
            if [ -n "$FOUND_WEB" ]; then
              echo "Copying assets from '$FOUND_WEB' -> ios/App/App/public"
              mkdir -p ios/App/App/public
              rsync -a "$FOUND_WEB"/ ios/App/App/public/
            else
              echo "WARNING: No built web assets directory found; public assets may be missing."
            fi
          fi

          # Debug: list expected files
          echo "Listing ios/App/App/ after sync/copy:"
          ls -la ios/App/App/ || true

          # Minimal safety nets if Xcode target expects these files
          if [ ! -f "ios/App/App/capacitor.config.json" ] && [ -f "capacitor.config.json" ]; then
            echo "Copying capacitor.config.json into iOS target folder..."
            cp capacitor.config.json ios/App/App/capacitor.config.json || true
          fi

          # Some templates expect a config.xml (Cordova interop); create a minimal one if missing
          if [ ! -f "ios/App/App/config.xml" ]; then
            echo "Generating minimal config.xml for Cordova interop..."
            cat > ios/App/App/config.xml <<'XML'
<?xml version='1.0' encoding='utf-8'?>
<widget id="com.fireopscalc.app" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
  <name>FireOpsCalc</name>
</widget>
XML
          fi

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod install --repo-update || pod install
          cd ../..

      - name: (Optional) Bump iOS build number from Codemagic BUILD_NUMBER
        script: |
          if [ -n "$BUILD_NUMBER" ]; then
            echo "Setting CFBundleVersion to $BUILD_NUMBER"
            (cd ios/App && agvtool new-version -all "$BUILD_NUMBER") || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" ios/App/App/Info.plist || true
          fi

      - name: Build and export IPA (App Store)
        script: |
          mkdir -p "$IPA_EXPORT_DIR"

          # Create ExportOptions.plist for App Store export
          cat > /tmp/ExportOptions.plist <<'PLIST'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>method</key><string>app-store</string>
  <key>signingStyle</key><string>automatic</string>
  <key>teamID</key><string>QZ55W58398</string>
  <key>compileBitcode</key><false/>
  <key>uploadBitcode</key><false/>
</dict>
</plist>
PLIST

          # Build & export; write IPA into the export dir
          xcode-project build-ipa \
            --workspace "$WORKSPACE" \
            --scheme "$SCHEME" \
            --ipa-directory "$IPA_EXPORT_DIR" \
            --export-options-plist "/tmp/ExportOptions.plist"

          # Rename newest ipa to a stable name
          IPA_PATH="$(ls -1t "$IPA_EXPORT_DIR"/*.ipa 2>/dev/null | head -n 1)"
          if [ -z "$IPA_PATH" ]; then
            echo "❌ No .ipa produced by xcode-project build-ipa"
            echo "Contents of $IPA_EXPORT_DIR:"
            ls -la "$IPA_EXPORT_DIR" || true
            exit 1
          fi
          mv -f "$IPA_PATH" "$IPA_EXPORT_DIR/$IPA_NAME"
          echo "✅ Exported: $IPA_EXPORT_DIR/$IPA_NAME"

    artifacts:
      - "$IPA_EXPORT_DIR/$IPA_NAME"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testers
