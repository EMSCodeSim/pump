workflows:
  ios_release:
    name: iOS Release (manual signing; Pods no-sign)
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      cocoapods: default
      node: latest
      ruby: default

      # === REQUIRED SECRETS (add in Codemagic UI ‚Üí Environment variables) ===
      # P12_BASE64            -> base64 of your Apple Distribution .p12
      # P12_PASSWORD          -> password for the .p12
      # APP_STORE_PROFILE_B64 -> base64 of your *App Store* .mobileprovision for com.fireopscalc.app
      # APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_PRIVATE_KEY
      # ================================================================
      vars:
        TEAM_ID: QZ55W58398
        APP_IDENTIFIER: com.fireopscalc.app
        XCODE_SCHEME: App
        EXPORT_METHOD: app-store

    scripts:
      - name: Preflight ‚Äî verify required secrets
        script: |
          set -euo pipefail
          missing=0
          for v in P12_BASE64 P12_PASSWORD APP_STORE_PROFILE_B64; do
            if [ -z "${!v:-}" ]; then echo "‚ùå Missing $v"; missing=1; fi
          done
          for v in APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_ISSUER_ID APP_STORE_CONNECT_PRIVATE_KEY; do
            if [ -z "${!v:-}" ]; then echo "‚ùå Missing $v"; missing=1; fi
          done
          [ "$missing" -eq 0 ] || { echo "Aborting due to missing secrets."; exit 1; }

      - name: Install Node deps (optional)
        script: |
          if [ -f package.json ]; then
            npm ci || npm i
          fi

      - name: CocoaPods install
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install --verbose
          cd ../..

      - name: Create signing keychain & import Distribution cert
        script: |
          set -euo pipefail
          KEYCHAIN_NAME="$(date +%Y%m%d_%H%M%S)_cm.keychain-db"
          KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN_NAME"
          KEYCHAIN_PWD="$(uuidgen)"
          security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_NAME"
          echo "$P12_BASE64" | base64 --decode > "$CM_BUILD_DIR/dist.p12"
          security import "$CM_BUILD_DIR/dist.p12" -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          # Ensure codesign can use the key without prompts
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"
          # Make it the default keychain for this session
          security list-keychains -s "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          echo "KEYCHAIN_NAME=$KEYCHAIN_NAME" >> "$CM_ENV"
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> "$CM_ENV"

      - name: Install App Store provisioning profile (B64 ‚Üí file)
        script: |
          set -euo pipefail
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_DIR"
          PROFILE_PATH="$PROFILES_DIR/AppStore.mobileprovision"
          echo "$APP_STORE_PROFILE_B64" | base64 --decode > "$PROFILE_PATH"
          /usr/bin/security cms -D -i "$PROFILE_PATH" > "$CM_BUILD_DIR/profile.plist"
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$CM_BUILD_DIR/profile.plist")
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$CM_BUILD_DIR/profile.plist")
          APP_ID_FULL=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$CM_BUILD_DIR/profile.plist")
          SUFFIX="${APP_ID_FULL#*.}"
          echo "üîé Profile name:  $PROFILE_NAME"
          echo "üîé Profile UUID:  $PROFILE_UUID"
          echo "üîé App ID inside: $SUFFIX"
          if [ "$SUFFIX" != "$APP_IDENTIFIER" ]; then
            echo "‚ùå Provisioning profile does not match bundle id $APP_IDENTIFIER"
            exit 1
          fi
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$CM_ENV"
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"

      - name: Write export options
        script: |
          cat > "$CM_BUILD_DIR/export_options.plist" <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>${EXPORT_METHOD}</string>
              <key>signingStyle</key><string>manual</string>
              <key>uploadSymbols</key><true/>
              <key>stripSwiftSymbols</key><true/>
              <key>compileBitcode</key><false/>
              <key>destination</key><string>export</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_IDENTIFIER}</key><string>${PROFILE_NAME}</string>
              </dict>
              <key>teamID</key><string>${TEAM_ID}</string>
            </dict>
          </plist>
          PLIST

      - name: Build & Archive app (Manual signing; Pods no-sign)
        script: |
          set -euo pipefail
          echo "üì¶ Archiving to $CM_BUILD_DIR/App.xcarchive"
          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            archive \
            "DEVELOPMENT_TEAM=$TEAM_ID" \
            "PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "CODE_SIGN_STYLE=Manual" \
            "CODE_SIGN_IDENTITY=Apple Distribution" \
            "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            "PROVISIONING_PROFILE=$PROFILE_UUID" \
            "OTHER_CODE_SIGN_FLAGS=--keychain $KEYCHAIN_PATH" \
            "App:PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "App:DEVELOPMENT_TEAM=$TEAM_ID" \
            "App:CODE_SIGN_STYLE=Manual" \
            "App:CODE_SIGN_IDENTITY=Apple Distribution" \
            "App:PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            "App:PROVISIONING_PROFILE=$PROFILE_UUID" \
            "Pods-App:CODE_SIGNING_ALLOWED=NO" \
            "Pods-App:CODE_SIGNING_REQUIRED=NO" \
            "Pods-App:DEVELOPMENT_TEAM=" \
            "Pods-App:PROVISIONING_PROFILE_SPECIFIER=" \
            "Pods-App:PROVISIONING_PROFILE=" \
            "Capacitor:CODE_SIGNING_ALLOWED=NO" \
            "Capacitor:CODE_SIGNING_REQUIRED=NO" \
            "Capacitor:DEVELOPMENT_TEAM=" \
            "Capacitor:PROVISIONING_PROFILE_SPECIFIER=" \
            "Capacitor:PROVISIONING_PROFILE=" \
            "CapacitorCordova:CODE_SIGNING_ALLOWED=NO" \
            "CapacitorCordova:CODE_SIGNING_REQUIRED=NO" \
            "CapacitorCordova:DEVELOPMENT_TEAM=" \
            "CapacitorCordova:PROVISIONING_PROFILE_SPECIFIER=" \
            "CapacitorCordova:PROVISIONING_PROFILE="

      - name: Export IPA
        script: |
          set -e
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$CM_BUILD_DIR/ipa"
          test -f "$CM_BUILD_DIR/ipa/App.ipa" || { echo "‚ùå IPA not found"; exit 1; }
          ls -lah "$CM_BUILD_DIR/ipa"

      - name: Upload to App Store Connect (ASC API key)
        script: |
          set -e
          app-store-connect publish \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --path "$CM_BUILD_DIR/ipa/App.ipa"

    artifacts:
      - $CM_BUILD_DIR/ipa/*.ipa
      - $CM_BUILD_DIR/App.xcarchive
