workflows:
  ios_release:
    name: iOS Release (ASC upload)
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      groups:
        # Must contain these 3 variables:
        #   APP_STORE_CONNECT_PRIVATE_KEY  (base64-encoded .p8 contents)
        #   APP_STORE_CONNECT_KEY_IDENTIFIER
        #   APP_STORE_CONNECT_ISSUER_ID
        - app_store_connect
      vars:
        APP_IDENTIFIER: "com.fireopscalc.app"
        TEAM_ID: "QZ55W58398"
        # Optional: shown in logs only
        PROFILE_HUMAN_NAME: "FireOpsCalc Distribution App"
        XCODE_SCHEME: "App"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        CONFIGURATION: "Release"
        EXPORT_METHOD: "app-store"
      cocoapods: default
      xcode: latest

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      # --- 0. Preflight -------------------------------------------------------
      - name: Preflight — verify App Store Connect vars are present
        script: |
          set -euo pipefail
          missing=0
          for v in APP_STORE_CONNECT_PRIVATE_KEY APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_ISSUER_ID; do
            if [ -z "${!v:-}" ]; then
              echo "❌ Missing required env var: $v"
              missing=1
            else
              echo "✅ $v is set"
            fi
          done
          [ "$missing" -eq 0 ] || { echo "Aborting."; exit 1; }

      # --- 1. Make ASC .p8 file ----------------------------------------------
      - name: Create App Store Connect API key file
        script: |
          set -euo pipefail
          mkdir -p "$CM_BUILD_DIR/asc"
          echo "$APP_STORE_CONNECT_PRIVATE_KEY" | base64 --decode > "$CM_BUILD_DIR/asc/AuthKey_$APP_STORE_CONNECT_KEY_IDENTIFIER.p8"
          chmod 600 "$CM_BUILD_DIR/asc/AuthKey_$APP_STORE_CONNECT_KEY_IDENTIFIER.p8"
          echo "API key written to $CM_BUILD_DIR/asc/AuthKey_$APP_STORE_CONNECT_KEY_IDENTIFIER.p8"

      # --- 2. Fetch / ensure provisioning profile ----------------------------
      - name: Fetch App Store provisioning profile for $APP_IDENTIFIER
        script: |
          set -euo pipefail
          cd "$CM_BUILD_DIR/asc"

          # Try to fetch an existing iOS App Store profile for our bundle id.
          app-store-connect fetch-signing-files \
            --type IOS_APP_STORE \
            --bundle-id "$APP_IDENTIFIER" \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --api-key-path "$CM_BUILD_DIR/asc/AuthKey_$APP_STORE_CONNECT_KEY_IDENTIFIER.p8" \
            --output-dir "$CM_BUILD_DIR/asc" \
            --create

          PROFILE_PATH="$(ls -1 *.mobileprovision | head -n 1)"
          if [ -z "${PROFILE_PATH:-}" ]; then
            echo "❌ No provisioning profile downloaded."
            exit 1
          fi
          echo "✅ Got profile: $PROFILE_PATH"

          # Extract UUID & install to the standard location for Xcode.
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i "$PROFILE_PATH")")
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp "$PROFILE_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "Installed profile UUID: $PROFILE_UUID"
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV

      # --- 3. Pods (optional if you have pods) -------------------------------
      - name: Install CocoaPods
        script: |
          set -euo pipefail
          cd ios/App
          pod install

      # --- 4. Archive (manual signing for App; Pods: no signing) -------------
      - name: Archive
        script: |
          set -euo pipefail
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -sdk iphoneos \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$APP_IDENTIFIER" \
            CODE_SIGN_STYLE=Manual \
            "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_UUID" \
            "CODE_SIGN_IDENTITY=Apple Distribution" \
            Pods-App.CODE_SIGNING_ALLOWED=NO \
            Capacitor.CODE_SIGNING_ALLOWED=NO \
            CapacitorCordova.CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            archive | xcpretty

      # --- 5. Export IPA ------------------------------------------------------
      - name: Export IPA (App Store)
        script: |
          set -euo pipefail
          cat > "$CM_BUILD_DIR/ExportOptions.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>destination</key><string>export</string>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_IDENTIFIER}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>uploadBitcode</key><false/>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/ExportOptions.plist" \
            -exportPath "$CM_BUILD_DIR/ipa" | xcpretty

          ls -lah "$CM_BUILD_DIR/ipa"
          test -f "$CM_BUILD_DIR/ipa/App.ipa" || (echo "❌ IPA not found"; exit 1)

      # --- 6. Upload to TestFlight -------------------------------------------
      - name: Upload IPA to App Store Connect (TestFlight)
        script: |
          set -euo pipefail
          app-store-connect publish \
            --path "$CM_BUILD_DIR/ipa/App.ipa" \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --api-key-path "$CM_BUILD_DIR/asc/AuthKey_$APP_STORE_CONNECT_KEY_IDENTIFIER.p8"
          echo "✅ Upload submitted to App Store Connect."

    artifacts:
      - ipa/*.ipa
      - App.xcarchive
      - ExportOptions.plist

    publishing:
      email:
        recipients:
          - your@email.com
        notify:
          success: true
          failure: true
