workflows:
  ios_release:
    name: iOS Release (ASC upload)
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      # Make sure this matches the *group name* you see in Codemagic UI.
      # From your screenshot it looked like "app_store_credentials".
      groups:
        - app_store_credentials

      vars:
        APP_IDENTIFIER: "com.fireopscalc.app"
        TEAM_ID: "QZ55W58398"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        CONFIGURATION: "Release"
        EXPORT_METHOD: "app-store"

      xcode: latest
      cocoapods: default

    triggering:
      events:
        - push
        - pull_request

    cache:
      cache_paths:
        - ~/Library/Caches/CocoaPods
        - ios/Pods
        - ~/.pub-cache
        - ~/.gradle/caches
        - ~/.gradle/wrapper

    scripts:
      # -------------------------------------------------------------------
      # 0) Resolve & verify App Store Connect variables (robust aliases)
      # -------------------------------------------------------------------
      - name: Preflight — resolve & verify App Store Connect vars
        script: |
          set -euo pipefail

          # Helper to pick the first non-empty value among candidates
          pick() {
            for v in "$@"; do
              if [ -n "${!v:-}" ]; then
                echo "${!v}"
                return 0
              fi
            done
            return 1
          }

          # Accept multiple common aliases so minor name differences don't break the build
          export APP_STORE_CONNECT_PRIVATE_KEY="$(
            pick APP_STORE_CONNECT_PRIVATE_KEY ASC_PRIVATE_KEY ASC_PRIVATE_KEY_B64 APP_STORE_CONNECT_PRIVATE_KEY_B64 || true
          )"

          export APP_STORE_CONNECT_KEY_IDENTIFIER="$(
            pick APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_KEY_ID ASC_KEY_ID || true
          )"

          export APP_STORE_CONNECT_ISSUER_ID="$(
            pick APP_STORE_CONNECT_ISSUER_ID ASC_ISSUER_ID || true
          )"

          # If any are still empty, fail with a clear message showing which ones are missing
          missing=0
          [ -n "${APP_STORE_CONNECT_PRIVATE_KEY:-}" ] || { echo "❌ Missing private key (set APP_STORE_CONNECT_PRIVATE_KEY or ASC_PRIVATE_KEY[_B64] or APP_STORE_CONNECT_PRIVATE_KEY_B64)"; missing=1; }
          [ -n "${APP_STORE_CONNECT_KEY_IDENTIFIER:-}" ] || { echo "❌ Missing key id (set APP_STORE_CONNECT_KEY_IDENTIFIER or APP_STORE_CONNECT_KEY_ID or ASC_KEY_ID)"; missing=1; }
          [ -n "${APP_STORE_CONNECT_ISSUER_ID:-}" ] || { echo "❌ Missing issuer id (set APP_STORE_CONNECT_ISSUER_ID or ASC_ISSUER_ID)"; missing=1; }

          if [ "$missing" -ne 0 ]; then
            echo "Aborting due to missing App Store Connect variables."
            exit 1
          fi

          # If any of the inputs were provided base64-encoded, auto-decode
          maybe_decode() {
            local val="$1"
            # Heuristic: very long single-line value with '=' padding often means base64
            if printf '%s' "$val" | grep -Eq '^[A-Za-z0-9+/=]{80,}$'; then
              printf '%s' "$val" | base64 --decode || echo "$val"
            else
              echo "$val"
            fi
          }

          # Normalize PRIVATE KEY to raw text (header/footer lines included)
          APP_STORE_CONNECT_PRIVATE_KEY="$(maybe_decode "$APP_STORE_CONNECT_PRIVATE_KEY")"
          export APP_STORE_CONNECT_PRIVATE_KEY

          echo "✅ ASC vars resolved:"
          echo "   KEY ID set"
          echo "   ISSUER ID set"
          echo "   PRIVATE KEY loaded"

      # -------------------------------------------------------------------
      # 1) Keychain + install certificates / profiles you added in Teams
      # -------------------------------------------------------------------
      - name: Set up keychain & install code-signing assets
        script: |
          set -euo pipefail
          keychain initialize
          keychain add-certificates
          xcode-project use-profiles

      # Optional check: confirm an App Store profile exists for the bundle id
      - name: Sanity check provisioning profile
        script: |
          set -euo pipefail
          cnt=$(grep -l "$APP_IDENTIFIER" ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | wc -l | tr -d ' ')
          if [ "$cnt" -eq 0 ]; then
            echo "❌ No App Store provisioning profile installed for $APP_IDENTIFIER"
            echo "Fix: Teams → Code signing → iOS provisioning profiles → upload the App Store profile for $APP_IDENTIFIER."
            exit 1
          fi
          echo "✅ Found $cnt provisioning profile(s) for $APP_IDENTIFIER"

      # -------------------------------------------------------------------
      # 2) Build
      # -------------------------------------------------------------------
      - name: Build IPA
        script: |
          set -euo pipefail
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME" \
            --archive-flags "-configuration $CONFIGURATION -destination generic/platform=iOS" \
            --export-method "$EXPORT_METHOD"

      # -------------------------------------------------------------------
      # 3) Upload to App Store Connect
      # -------------------------------------------------------------------
      - name: Upload to App Store Connect
        script: |
          set -euo pipefail
          IPA_PATH="$(ls -1 "$CM_BUILD_DIR"/Build/IPA/*.ipa 2>/dev/null | head -n 1 || true)"
          if [ -z "${IPA_PATH:-}" ]; then
            echo "❌ No IPA file found to upload!"
            exit 1
          fi
          echo "Uploading IPA_PATH = [$IPA_PATH] to App Store Connect..."

          app-store-connect publish \
            --path "$IPA_PATH" \
            --apiKeyId "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --issuerId "$APP_STORE_CONNECT_ISSUER_ID" \
            --privateKey "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --submit-to-testflight=false

    artifacts:
      - build/ios/ipa/*.ipa
      - $(HOME)/Library/Logs/gym/*.log
      - $CM_BUILD_DIR/Build/*

    publishing:
      email:
        recipients:
          - your@email.com
        notify:
          success: true
          failure: true
