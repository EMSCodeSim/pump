workflows:
  ios_release:
    name: iOS Release Build & Upload
    instance_type: mac_mini_m2
    max_build_duration: 60

    integrations:
      app_store_connect: FireCalc   # your Codemagic ASC integration name

    environment:
      xcode: 16.4
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.fireopscalc.app
      vars:
        DEVELOPMENT_TEAM: QZ55W58398
        XCODE_WORKSPACE: ios/App/App.xcworkspace
        XCODE_SCHEME: App
        ARCHIVE_PATH: $CM_BUILD_DIR/build/App.xcarchive
        EXPORT_PATH: $CM_BUILD_DIR/Export
        EXPECTED_BUNDLE_ID: com.fireopscalc.app

    cache:
      cache_paths:
        - ~/.npm
        - ~/Library/Caches/CocoaPods
        - ios/Pods -> ios/Podfile.lock
        - ios/App/Pods -> ios/App/Podfile.lock

    scripts:
      - name: Install Node deps
        script: |
          npm ci || npm install

      - name: Capacitor sync (ensures bundle id flows into Xcode)
        script: |
          # Repo must contain:
          #   ios/App/capacitor.config.json -> "appId": "com.fireopscalc.app"
          #   ios/App/config.xml            -> <widget id="com.fireopscalc.app" ...>
          npx cap sync ios

      - name: Install CocoaPods (if present)
        script: |
          if [ -f "ios/App/Podfile" ]; then
            cd ios/App && pod install
          elif [ -f "ios/Podfile" ]; then
            cd ios && pod install
          else
            echo "No Podfile found (ok if not using Pods)."
          fi

      - name: Fetch signing files from App Store Connect (ensures profiles installed)
        script: |
          app-store-connect fetch-signing-files "$EXPECTED_BUNDLE_ID" \
            --type IOS_APP_STORE \
            --create
          echo "Installed provisioning profiles:"
          ls -l "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      - name: Apply signing to Xcode project
        script: |
          xcode-project use-profiles

      - name: Detect exact provisioning profile (UUID & Name) for com.fireopscalc.app
        script: |
          set -e
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "Searching in: $PROFILE_DIR"
          FOUND_UUID=""
          FOUND_NAME=""
          FOUND_TYPE=""
          for f in "$PROFILE_DIR"/*.mobileprovision; do
            /usr/libexec/PlistBuddy -c 'Print' /dev/stdin <<< "$(/usr/bin/security cms -D -i "$f")" > /tmp/_prof.plist 2>/dev/null || continue
            APPID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /tmp/_prof.plist 2>/dev/null || true)
            NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /tmp/_prof.plist 2>/dev/null || true)
            UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /tmp/_prof.plist 2>/dev/null || true)
            EXP=$(/usr/libexec/PlistBuddy -c 'Print :ExpirationDate' /tmp/_prof.plist 2>/dev/null || true)
            HAS_DEVICES=$(/usr/libexec/PlistBuddy -c 'Print :ProvisionedDevices' /tmp/_prof.plist 2>/dev/null && echo yes || echo no)
            BUNDLE_ID="${APPID#*.}"
            # App Store profiles have NO device list.
            if [ "$BUNDLE_ID" = "$EXPECTED_BUNDLE_ID" ] && [ "$HAS_DEVICES" = "no" ]; then
              FOUND_UUID="$UUID"; FOUND_NAME="$NAME"; FOUND_TYPE="AppStore"
              echo "Matched profile:"
              echo "  Name: $FOUND_NAME"
              echo "  UUID: $FOUND_UUID"
              echo "  AppID: $APPID"
              echo "  Expires: $EXP"
              break
            fi
          done
          if [ -z "$FOUND_UUID" ]; then
            echo "ERROR: No installed *App Store* provisioning profile matches $EXPECTED_BUNDLE_ID"
            exit 1
          fi
          echo "export PROFILE_UUID=$FOUND_UUID" >> $CM_ENV
          echo "export PROFILE_NAME=$FOUND_NAME" >> $CM_ENV

      - name: Build archive (Manual signing; FORCE embed this profile)
        script: |
          echo "Using profile:"
          echo "  PROFILE_NAME=$PROFILE_NAME"
          echo "  PROFILE_UUID=$PROFILE_UUID"
          xcodebuild -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PRODUCT_BUNDLE_IDENTIFIER="$EXPECTED_BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            CODE_SIGNING_ALLOWED=YES

      - name: VERIFY archive â€” bundle id & embedded profile
        script: |
          APP="$ARCHIVE_PATH/Products/Applications/App.app"
          INFO_PLIST="$APP/Info.plist"
          [ -f "$INFO_PLIST" ] || { echo "Missing $INFO_PLIST"; ls -R "$ARCHIVE_PATH"; exit 1; }
          ACTUAL=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$INFO_PLIST" 2>/dev/null || true)
          echo "Archived CFBundleIdentifier: '$ACTUAL'"
          [ "$ACTUAL" = "$EXPECTED_BUNDLE_ID" ] || { echo "Bundle id mismatch"; exit 1; }
          [ -f "$APP/embedded.mobileprovision" ] || { echo "MISSING embedded.mobileprovision"; exit 1; }
          echo "Embedded profile summary:"
          /usr/bin/security cms -D -i "$APP/embedded.mobileprovision" > /tmp/_emb.plist
          /usr/libexec/PlistBuddy -c 'Print :Name' /tmp/_emb.plist || true
          /usr/libexec/PlistBuddy -c 'Print :UUID' /tmp/_emb.plist || true
          /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /tmp/_emb.plist || true

      - name: Create ExportOptions.plist (NO provisioningProfiles)
        script: |
          cat <<EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>$DEVELOPMENT_TEAM</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadSymbols</key>
            <true/>
            <key>manageAppVersionAndBuildNumber</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
          echo "=== ExportOptions.plist ==="; cat ExportOptions.plist

      - name: Export IPA
        script: |
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$EXPORT_PATH"

    artifacts:
      - Export/*.ipa
      - $CM_BUILD_DIR/build/*.xcarchive

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
