workflows:
  ios_release:
    name: iOS Release (App Store Connect)
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      cocoapods: default
      node: latest
      ruby: default

      ios_signing:
        certificates:
          - FireOpsCalc Distribution
        provisioning_profiles:
          - FireOpsCalc App Store Provision

      vars:
        APP_IDENTIFIER: com.fireopscalc.app
        TEAM_ID: QZ55W58398
        XCODE_SCHEME: App

        # App Store Connect API (Codemagic app-level env group recommended)
        APP_STORE_CONNECT_KEY_IDENTIFIER: 82567339RS
        APP_STORE_CONNECT_ISSUER_ID: a786600e-e10a-42b2-a2bf-443a1da2554b
        APP_STORE_CONNECT_PRIVATE_KEY: |
          -----BEGIN PRIVATE KEY-----
          (paste your .p8 here)
          -----END PRIVATE KEY-----

        # Optional fallback if you don‚Äôt rely on the Codemagic profile store
        # APP_STORE_PROFILE_B64: ""

    scripts:
      - name: Install dependencies
        script: |
          set -e
          if [ -f package.json ]; then
            npm ci
            npm run build || true
          fi

      - name: Pod install
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install --verbose
          cd ../..

      - name: Resolve App Store provisioning profile (env ‚ñ∫ installed ‚ñ∫ repo)
        script: |
          set -euo pipefail
          TARGET_BUNDLE_ID="${APP_IDENTIFIER}"
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          OUT_DIR="$CM_BUILD_DIR"
          mkdir -p "$OUT_DIR"

          if [ -n "${APP_STORE_PROFILE_B64:-}" ]; then
            echo "‚ÑπÔ∏è Writing provisioning profile from APP_STORE_PROFILE_B64"
            echo "$APP_STORE_PROFILE_B64" | base64 --decode > "$OUT_DIR/AppStore.mobileprovision"
            PROFILE_PATH="$OUT_DIR/AppStore.mobileprovision"
          fi

          inspect_profile() {
            local f="$1"
            /usr/bin/security cms -D -i "$f" > "$OUT_DIR/tmp.plist"
            local app_id=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$OUT_DIR/tmp.plist" 2>/dev/null || true)
            local provisions_all=$(/usr/libexec/PlistBuddy -c "Print ProvisionsAllDevices" "$OUT_DIR/tmp.plist" 2>/dev/null || echo "false")
            local prov_devices=$(/usr/libexec/PlistBuddy -c "Print ProvisionedDevices" "$OUT_DIR/tmp.plist" 2>/dev/null || true)
            local name=$(/usr/libexec/PlistBuddy -c "Print Name" "$OUT_DIR/tmp.plist" 2>/dev/null || true)
            echo "$app_id|$provisions_all|$prov_devices|$name"
          }

          if [ -z "${PROFILE_PATH:-}" ] && [ -d "$PROFILES_DIR" ]; then
            echo "‚ÑπÔ∏è Searching installed profiles for $TARGET_BUNDLE_ID"
            BEST=""
            BEST_MTIME=0
            shopt -s nullglob
            for f in "$PROFILES_DIR"/*.mobileprovision; do
              meta="$(inspect_profile "$f")"
              app_id="${meta%%|*}"; rest="${meta#*|}"
              provisions_all="${rest%%|*}"; rest="${rest#*|}"
              prov_devices="${rest%%|*}"; name="${rest#*|}"
              [ -n "$app_id" ] || continue
              suffix="${app_id#*.}"
              if [ "$suffix" = "$TARGET_BUNDLE_ID" ] && \
                 [ "$provisions_all" != "true" ] && \
                 ! echo "$prov_devices" | grep -q "<array>"; then
                m=$(stat -f "%m" "$f" || echo 0)
                if [ "$m" -gt "$BEST_MTIME" ]; then
                  BEST="$f"; BEST_MTIME="$m"; BEST_NAME="$name"
                fi
              fi
            done
            if [ -n "${BEST:-}" ]; then
              echo "‚úÖ Found installed App Store profile: $BEST_NAME"
              PROFILE_PATH="$BEST"
            fi
          fi

          if [ -z "${PROFILE_PATH:-}" ] && [ -f "ios/App/AppStore.mobileprovision" ]; then
            echo "‚ÑπÔ∏è Using repo profile at ios/App/AppStore.mobileprovision"
            PROFILE_PATH="ios/App/AppStore.mobileprovision"
          fi

          if [ -z "${PROFILE_PATH:-}" ]; then
            echo "‚ùå No App Store provisioning profile found for $TARGET_BUNDLE_ID"
            echo "üëâ Fix: set APP_STORE_PROFILE_B64 (base64 of .mobileprovision),"
            echo "   or upload a profile in Codemagic (Teams ‚Üí iOS provisioning profiles),"
            echo "   or commit ios/App/AppStore.mobileprovision."
            exit 1
          fi

          /usr/bin/security cms -D -i "$PROFILE_PATH" > "$OUT_DIR/profile.plist"
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$OUT_DIR/profile.plist" 2>/dev/null || echo "AppStoreProfile")
          echo "PROFILE_PATH=$PROFILE_PATH" >> "$CM_ENV"
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$CM_ENV"
          echo "üîó PROFILE_PATH=$PROFILE_PATH"
          echo "üè∑Ô∏è PROFILE_NAME=$PROFILE_NAME"

      - name: Write export options
        script: |
          cat > "$CM_BUILD_DIR/export_options.plist" <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>signingStyle</key><string>manual</string>
              <key>uploadSymbols</key><true/>
              <key>stripSwiftSymbols</key><true/>
            </dict>
          </plist>
          PLIST

      - name: Build & Archive app (Manual signing ‚Äì App only; Pods no-sign) 
        script: |
          set -euo pipefail
          : "${PROFILE_NAME:?PROFILE_NAME not set}"

          # Provide team & bundle at project level so Xcode resolves a team,
          # but keep the provisioning profile scoped to App target only.
          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            archive \
            "DEVELOPMENT_TEAM=$TEAM_ID" \
            "PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "CODE_SIGN_STYLE=Manual" \
            "CODE_SIGN_IDENTITY=Apple Distribution" \
            "App:PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "App:DEVELOPMENT_TEAM=$TEAM_ID" \
            "App:CODE_SIGN_STYLE=Manual" \
            "App:CODE_SIGN_IDENTITY=Apple Distribution" \
            "App:PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            "Pods-App:CODE_SIGNING_ALLOWED=NO" \
            "Pods-App:CODE_SIGNING_REQUIRED=NO" \
            "Pods-App:CODE_SIGN_STYLE=Automatic" \
            "Pods-App:DEVELOPMENT_TEAM=" \
            "Pods-App:PROVISIONING_PROFILE_SPECIFIER=" \
            "Pods-App:PROVISIONING_PROFILE=" \
            "Capacitor:CODE_SIGNING_ALLOWED=NO" \
            "Capacitor:CODE_SIGNING_REQUIRED=NO" \
            "Capacitor:CODE_SIGN_STYLE=Automatic" \
            "Capacitor:DEVELOPMENT_TEAM=" \
            "Capacitor:PROVISIONING_PROFILE_SPECIFIER=" \
            "Capacitor:PROVISIONING_PROFILE=" \
            "CapacitorCordova:CODE_SIGNING_ALLOWED=NO" \
            "CapacitorCordova:CODE_SIGNING_REQUIRED=NO" \
            "CapacitorCordova:CODE_SIGN_STYLE=Automatic" \
            "CapacitorCordova:DEVELOPMENT_TEAM=" \
            "CapacitorCordova:PROVISIONING_PROFILE_SPECIFIER=" \
            "CapacitorCordova:PROVISIONING_PROFILE="

      - name: Export IPA
        script: |
          set -e
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$CM_BUILD_DIR/ipa"
          ls -lah "$CM_BUILD_DIR/ipa"

      - name: Upload to App Store Connect
        script: |
          set -e
          app-store-connect publish \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --path "$CM_BUILD_DIR/ipa/App.ipa"

    artifacts:
      - $CM_BUILD_DIR/ipa/*.ipa
      - $CM_BUILD_DIR/App.xcarchive
