workflows:
  ios_release:
    name: iOS Release Build & Upload
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1

      vars:
        # --- App identity ---
        PRODUCT_BUNDLE_IDENTIFIER: "com.fireopscalc.app"
        DEVELOPMENT_TEAM: "QZ55W58398"
        WORKSPACE: "ios/App/App.xcworkspace"
        SCHEME: "App"

        # --- Paths ---
        ARCHIVE_PATH: "/Users/builder/clone/build/App.xcarchive"
        DERIVED_DATA: "/Users/builder/clone/DerivedData"
        IPA_EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

        # --- App Store Connect creds (set these as secure env vars in Codemagic UI) ---
        # APP_STORE_CONNECT_PRIVATE_KEY: (paste your .p8 contents)
        # APP_STORE_CONNECT_KEY_IDENTIFIER: "HG4YL5BPFZ"
        # APP_STORE_CONNECT_ISSUER_ID: "a786600e-e10a-42b2-a2bf-443a1da2554b"

      ios_signing:
        # Use the assets you fetched/created in Codemagic > Teams > iOS code signing
        certificates:
          - reference: "FireCalcCertificate"
        provisioning_profiles:
          - reference: "FireOpsCalcprofile"

    triggering:
      events:
        - manual

    scripts:
      - name: Capacitor sync (ensure bundle id flows into Xcode)
        script: |
          npx capacitor sync ios

      - name: Install CocoaPods (if present)
        script: |
          cd ios/App
          if [ -f Podfile ]; then
            pod install --repo-update
          else
            echo "No Podfile present â€” skipping CocoaPods install."
          fi

      - name: Install referenced signing assets (certificate + profile)
        script: |
          echo "== Certificates =="
          security find-identity -v -p codesigning || true
          echo "== Provisioning Profiles =="
          ls -1 "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      - name: Build archive (manual signing)
        script: |
          set -e
          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_STYLE=Manual \
            PRODUCT_BUNDLE_IDENTIFIER="$PRODUCT_BUNDLE_IDENTIFIER" \
            PROVISIONING_PROFILE_SPECIFIER="FireOpsCalcprofile" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            archive | xcpretty

      - name: Create ExportOptions.plist (App Store)
        script: |
          mkdir -p "$IPA_EXPORT_DIR"
          cat > /tmp/ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>destination</key><string>export</string>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF

      - name: Export IPA (App Store)
        script: |
          set -e
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportPath "$IPA_EXPORT_DIR" \
            -exportOptionsPlist /tmp/ExportOptions.plist | xcpretty

          IPA_FOUND="$(ls -1 "$IPA_EXPORT_DIR"/*.ipa 2>/dev/null | head -n 1 || true)"
          if [ -z "$IPA_FOUND" ]; then
            echo "ERROR: No .ipa produced in $IPA_EXPORT_DIR"
            ls -al "$IPA_EXPORT_DIR" || true
            exit 1
          fi
          mv "$IPA_FOUND" "$IPA_EXPORT_DIR/$IPA_NAME"

    artifacts:
      - "$IPA_EXPORT_DIR/$IPA_NAME"

    publishing:
      app_store_connect:
        submit_to_testflight: true
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
