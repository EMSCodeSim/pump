workflows:
  ios_release:
    name: iOS Release (manual signing; flexible secrets)
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      cocoapods: default
      node: latest
      ruby: default
      vars:
        TEAM_ID: QZ55W58398
        APP_IDENTIFIER: com.fireopscalc.app
        XCODE_SCHEME: App
        EXPORT_METHOD: app-store
        # Optional default paths if you committed signing files to the repo
        LOCAL_P12_PATH: ios/signing/dist.p12
        LOCAL_PROFILE_PATH: ios/App/AppStore.mobileprovision
        # If your .p12 has no password, leave P12_PASSWORD empty in Codemagic UI
        # App Store Connect API key (optional — only required for upload step)
        # APP_STORE_CONNECT_KEY_IDENTIFIER: ""
        # APP_STORE_CONNECT_ISSUER_ID: ""
        # APP_STORE_CONNECT_PRIVATE_KEY: ""    # contents of .p8 key

    scripts:
      # ────────────────────────────────────────────────────────────────────────────
      # 1) Resolve signing inputs from (A) env base64, (B) committed files.
      #    We DO NOT fail here if ASC variables are missing — that only skips upload.
      # ────────────────────────────────────────────────────────────────────────────
      - name: Preflight — resolve signing inputs
        script: |
          set -euo pipefail

          # Decide signing mode for cert/profile: env-b64 or local files
          SIGN_MODE=""
          CERT_SRC=""
          PROF_SRC=""

          if [ -n "${P12_BASE64:-}" ] && [ -n "${APP_STORE_PROFILE_B64:-}" ]; then
            SIGN_MODE="b64"
            CERT_SRC="env:P12_BASE64"
            PROF_SRC="env:APP_STORE_PROFILE_B64"
          elif [ -f "${LOCAL_P12_PATH}" ] && [ -f "${LOCAL_PROFILE_PATH}" ]; then
            SIGN_MODE="files"
            CERT_SRC="$LOCAL_P12_PATH"
            PROF_SRC="$LOCAL_PROFILE_PATH"
          else
            echo "❌ Could not find signing inputs."
            echo "   Provide either:"
            echo "   • P12_BASE64 + P12_PASSWORD + APP_STORE_PROFILE_B64 (env vars in Codemagic UI),"
            echo "     OR"
            echo "   • Commit files at ${LOCAL_P12_PATH} and ${LOCAL_PROFILE_PATH}."
            exit 1
          fi

          echo "✅ Using signing mode: ${SIGN_MODE}"
          echo "   Certificate source: ${CERT_SRC}"
          echo "   Profile source:     ${PROF_SRC}"
          echo "SIGN_MODE=${SIGN_MODE}" >> "$CM_ENV"

          # Upload step is optional. We'll only do it if all ASC vars are present.
          ASC_OK=1
          for v in APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_ISSUER_ID APP_STORE_CONNECT_PRIVATE_KEY; do
            if [ -z "${!v:-}" ]; then ASC_OK=0; fi
          done
          if [ "$ASC_OK" -eq 1 ]; then
            echo "ASC_UPLOAD=1" >> "$CM_ENV"
            echo "✅ App Store Connect API key present — will upload after build."
          else
            echo "ASC_UPLOAD=0" >> "$CM_ENV"
            echo "ℹ️ App Store Connect API key missing — upload step will be skipped."
          fi

      # ────────────────────────────────────────────────────────────────────────────
      # 2) Install deps
      # ────────────────────────────────────────────────────────────────────────────
      - name: Install JS deps (optional)
        script: |
          if [ -f package.json ]; then
            npm ci || npm i
          fi

      - name: CocoaPods
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install --verbose
          cd ../..

      # ────────────────────────────────────────────────────────────────────────────
      # 3) Create keychain & import cert (from env-b64 or from file)
      # ────────────────────────────────────────────────────────────────────────────
      - name: Set up keychain & install Distribution cert
        script: |
          set -euo pipefail
          KEYCHAIN_NAME="$(date +%Y%m%d_%H%M%S)_cm.keychain-db"
          KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN_NAME"
          KEYCHAIN_PWD="$(uuidgen)"

          security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_NAME"
          security list-keychains -s "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"

          if [ "${SIGN_MODE}" = "b64" ]; then
            echo "$P12_BASE64" | base64 --decode > "$CM_BUILD_DIR/dist.p12"
            P12_FILE="$CM_BUILD_DIR/dist.p12"
          else
            P12_FILE="$LOCAL_P12_PATH"
          fi

          security import "$P12_FILE" -k "$KEYCHAIN_PATH" -P "${P12_PASSWORD:-}" -T /usr/bin/codesign -T /usr/bin/security -A
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PWD" "$KEYCHAIN_PATH"

          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> "$CM_ENV"

      # ────────────────────────────────────────────────────────────────────────────
      # 4) Install provisioning profile (from env-b64 or from file)
      # ────────────────────────────────────────────────────────────────────────────
      - name: Install App Store provisioning profile
        script: |
          set -euo pipefail
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_DIR"
          PROFILE_PATH="$PROFILES_DIR/AppStore.mobileprovision"

          if [ "${SIGN_MODE}" = "b64" ]; then
            echo "$APP_STORE_PROFILE_B64" | base64 --decode > "$PROFILE_PATH"
          else
            cp "$LOCAL_PROFILE_PATH" "$PROFILE_PATH"
          fi

          /usr/bin/security cms -D -i "$PROFILE_PATH" > "$CM_BUILD_DIR/profile.plist"
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$CM_BUILD_DIR/profile.plist")
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$CM_BUILD_DIR/profile.plist")
          APP_ID_FULL=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$CM_BUILD_DIR/profile.plist")
          SUFFIX="${APP_ID_FULL#*.}"

          echo "🔎 Profile name:  $PROFILE_NAME"
          echo "🔎 Profile UUID:  $PROFILE_UUID"
          echo "🔎 App ID inside: $SUFFIX"

          if [ "$SUFFIX" != "$APP_IDENTIFIER" ]; then
            echo "❌ Provisioning profile bundle id ($SUFFIX) does not match $APP_IDENTIFIER"
            exit 1
          fi

          echo "PROFILE_NAME=$PROFILE_NAME" >> "$CM_ENV"
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"

      # ────────────────────────────────────────────────────────────────────────────
      # 5) Export options
      # ────────────────────────────────────────────────────────────────────────────
      - name: Write export options
        script: |
          cat > "$CM_BUILD_DIR/export_options.plist" <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>${EXPORT_METHOD}</string>
              <key>signingStyle</key><string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_IDENTIFIER}</key><string>${PROFILE_NAME}</string>
              </dict>
              <key>teamID</key><string>${TEAM_ID}</string>
              <key>destination</key><string>export</string>
              <key>stripSwiftSymbols</key><true/>
              <key>uploadSymbols</key><true/>
              <key>compileBitcode</key><false/>
            </dict>
          </plist>
          PLIST

      # ────────────────────────────────────────────────────────────────────────────
      # 6) Build & Archive (Manual signing for App; disable signing for Pods)
      # ────────────────────────────────────────────────────────────────────────────
      - name: Build & Archive app (Manual signing; Pods no-sign)
        script: |
          set -euo pipefail
          echo "📦 Archiving to $CM_BUILD_DIR/App.xcarchive"

          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            archive \
            "OTHER_CODE_SIGN_FLAGS=--keychain $KEYCHAIN_PATH" \
            "DEVELOPMENT_TEAM=$TEAM_ID" \
            "PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "CODE_SIGN_STYLE=Manual" \
            "CODE_SIGN_IDENTITY=Apple Distribution" \
            "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            "PROVISIONING_PROFILE=$PROFILE_UUID" \
            "App:PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "App:DEVELOPMENT_TEAM=$TEAM_ID" \
            "App:CODE_SIGN_STYLE=Manual" \
            "App:CODE_SIGN_IDENTITY=Apple Distribution" \
            "App:PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            "App:PROVISIONING_PROFILE=$PROFILE_UUID" \
            "Pods-App:CODE_SIGNING_ALLOWED=NO" \
            "Pods-App:CODE_SIGNING_REQUIRED=NO" \
            "Pods-App:DEVELOPMENT_TEAM=" \
            "Pods-App:PROVISIONING_PROFILE_SPECIFIER=" \
            "Pods-App:PROVISIONING_PROFILE=" \
            "Capacitor:CODE_SIGNING_ALLOWED=NO" \
            "Capacitor:CODE_SIGNING_REQUIRED=NO" \
            "Capacitor:DEVELOPMENT_TEAM=" \
            "Capacitor:PROVISIONING_PROFILE_SPECIFIER=" \
            "Capacitor:PROVISIONING_PROFILE=" \
            "CapacitorCordova:CODE_SIGNING_ALLOWED=NO" \
            "CapacitorCordova:CODE_SIGNING_REQUIRED=NO" \
            "CapacitorCordova:DEVELOPMENT_TEAM=" \
            "CapacitorCordova:PROVISIONING_PROFILE_SPECIFIER=" \
            "CapacitorCordova:PROVISIONING_PROFILE="

      # ────────────────────────────────────────────────────────────────────────────
      # 7) Export IPA
      # ────────────────────────────────────────────────────────────────────────────
      - name: Export IPA
        script: |
          set -e
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$CM_BUILD_DIR/ipa"
          test -f "$CM_BUILD_DIR/ipa/App.ipa" || { echo "❌ IPA not found"; exit 1; }
          ls -lah "$CM_BUILD_DIR/ipa"

      # ────────────────────────────────────────────────────────────────────────────
      # 8) Upload to App Store Connect (optional if ASC vars present)
      # ────────────────────────────────────────────────────────────────────────────
      - name: Upload to App Store Connect (if API key provided)
        script: |
          set -e
          if [ "${ASC_UPLOAD:-0}" = "1" ]; then
            app-store-connect publish \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --path "$CM_BUILD_DIR/ipa/App.ipa"
          else
            echo "ℹ️ Skipping upload — App Store Connect API variables not provided."
          fi

    artifacts:
      - $CM_BUILD_DIR/ipa/*.ipa
      - $CM_BUILD_DIR/App.xcarchive
