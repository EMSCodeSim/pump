workflows:
  ios_release:
    name: FireOpsCalc iOS Release
    instance_type: mac_mini_m2
    max_build_duration: 60

    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true

    integrations:
      app_store_connect: FireCalc

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        # Xcode
        WORKSPACE: "ios/App/App.xcworkspace"
        SCHEME: "App"
        CONFIGURATION: "Release"
        DEVELOPMENT_TEAM: "QZ55W58398"
        PRODUCT_BUNDLE_IDENTIFIER: "com.fireopscalc.app"

        # Provisioning profile (exact name as in Codemagic UI)
        PROVISIONING_PROFILE_SPECIFIER: "FireOpsCalcprofile"

        # Paths
        ARCHIVE_PATH: "/Users/builder/clone/build/App.xcarchive"
        EXPORT_DIR: "/Users/builder/clone/Export/export_tmp"
        IPA_EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

      ios_signing:
        certificates:
          - FireCalcCertiicate
        provisioning_profiles:
          - FireOpsCalcprofile

    scripts:
      - name: Install Node deps & build web (if present)
        script: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci || npm install
            else
              npm install
            fi
            npm run build --if-present
          else
            echo "No package.json, skipping web build."
          fi

      - name: Capacitor sync iOS (ensures public/ & capacitor.config.json)
        script: |
          if [ -f capacitor.config.ts ] || [ -f capacitor.config.json ] || [ -f capacitor.config.js ]; then
            npx cap sync ios
          else
            echo "No capacitor.config.* found — assuming native files already in place."
          fi
          echo "Listing ios/App/App/ after sync:"
          ls -la ios/App/App/ || true

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod install --repo-update || pod install
          cd ../..

      - name: (Optional) Bump iOS build number from Codemagic BUILD_NUMBER
        script: |
          if [ -n "$BUILD_NUMBER" ]; then
            echo "Setting CFBundleVersion to $BUILD_NUMBER"
            (cd ios/App && agvtool new-version -all "$BUILD_NUMBER") || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" ios/App/App/Info.plist || true
          fi

      - name: Create ExportOptions.plist (Manual signing)
        script: |
          set -e
          EXPORT_PLIST="/Users/builder/ExportOptions.plist"
          rm -f "$EXPORT_PLIST"
          /usr/bin/plutil -create xml1 "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :method string app-store" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :signingStyle string manual" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :teamID string $DEVELOPMENT_TEAM" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$PRODUCT_BUNDLE_IDENTIFIER string $PROVISIONING_PROFILE_SPECIFIER" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :compileBitcode bool false" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :uploadBitcode bool false" "$EXPORT_PLIST"
          echo "==== ExportOptions.plist ===="
          /usr/libexec/PlistBuddy -c "Print" "$EXPORT_PLIST" || true

      - name: Archive with xcodebuild (try MANUAL first, then AUTO if it conflicts)
        script: |
          set -e
          if command -v xcpretty >/dev/null 2>&1; then XP="| xcpretty"; else XP=""; fi

          echo "=== ARCHIVE ATTEMPT 1: MANUAL signing ==="
          echo "TEAM: $DEVELOPMENT_TEAM"
          echo "BUNDLE_ID: $PRODUCT_BUNDLE_IDENTIFIER"
          echo "PROFILE: $PROVISIONING_PROFILE_SPECIFIER"
          rm -rf "$ARCHIVE_PATH"
          # shellcheck disable=SC2086
          set +e
          eval xcodebuild -workspace \""$WORKSPACE"\" \
            -scheme \""$SCHEME"\" \
            -configuration \""$CONFIGURATION"\" \
            -archivePath \""$ARCHIVE_PATH"\" \
            DEVELOPMENT_TEAM=\""$DEVELOPMENT_TEAM"\" \
            PRODUCT_BUNDLE_IDENTIFIER=\""$PRODUCT_BUNDLE_IDENTIFIER"\" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER=\""$PROVISIONING_PROFILE_SPECIFIER"\" \
            archive $XP
          STATUS=$?
          set -e

          if [ $STATUS -ne 0 ] || [ ! -d "$ARCHIVE_PATH" ]; then
            echo "=== Manual signing archive failed, trying AUTO (to match project build settings) ==="
            rm -rf "$ARCHIVE_PATH"
            # shellcheck disable=SC2086
            eval xcodebuild -workspace \""$WORKSPACE"\" \
              -scheme \""$SCHEME"\" \
              -configuration \""$CONFIGURATION"\" \
              -archivePath \""$ARCHIVE_PATH"\" \
              DEVELOPMENT_TEAM=\""$DEVELOPMENT_TEAM"\" \
              PRODUCT_BUNDLE_IDENTIFIER=\""$PRODUCT_BUNDLE_IDENTIFIER"\" \
              CODE_SIGN_STYLE=Automatic \
              archive $XP
          fi

          # final check
          if [ ! -d "$ARCHIVE_PATH" ]; then
            echo "❌ Archive was not created at $ARCHIVE_PATH"
            exit 1
          fi
          echo "✅ Archive created at $ARCHIVE_PATH"

      - name: Export IPA with xcodebuild -exportArchive
        script: |
          set -e
          if command -v xcpretty >/dev/null 2>&1; then XP="| xcpretty"; else XP=""; fi
          mkdir -p "$EXPORT_DIR" "$IPA_EXPORT_DIR"

          # shellcheck disable=SC2086
          eval xcodebuild -exportArchive \
            -archivePath \""$ARCHIVE_PATH"\" \
            -exportOptionsPlist /Users/builder/ExportOptions.plist \
            -exportPath \""$EXPORT_DIR"\" $XP

          IPA_PATH="$(ls -1t "$EXPORT_DIR"/*.ipa 2>/dev/null | head -n 1)"
          if [ -z "$IPA_PATH" ]; then
            echo "❌ Export did not produce an IPA. Contents of $EXPORT_DIR:"
            ls -la "$EXPORT_DIR" || true
            exit 1
          fi
          mv -f "$IPA_PATH" "$IPA_EXPORT_DIR/$IPA_NAME"
          echo "✅ Exported: $IPA_EXPORT_DIR/$IPA_NAME"

    artifacts:
      - "$IPA_EXPORT_DIR/$IPA_NAME"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testers
