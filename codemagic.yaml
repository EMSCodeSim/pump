workflows:
  ios-capacitor:
    name: "iOS Capacitor â€” App manual signing; Pods no-sign"
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      node: 20
      xcode: latest
      cocoapods: default
      groups:
        - app_store_credentials
      vars:
        APP_IDENTIFIER: com.fireopscalc.app
        XCODE_SCHEME: App

    scripts:
      - name: Install dependencies
        script: |
          npm ci || npm install --legacy-peer-deps

      - name: Build web assets
        script: |
          npm run build || true
          mkdir -p dist
          cp index.html dist/index.html || true

      - name: Sync Capacitor iOS
        script: |
          [ -d ios ] || npx cap add ios
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install
          cd ../../

      - name: Generate certificate private key (CSR key)
        script: |
          set -e
          CERT_KEY_PATH="$CM_BUILD_DIR/cert_private.key"
          openssl genrsa -out "$CERT_KEY_PATH" 2048
          echo "CERT_KEY_PATH=$CERT_KEY_PATH" >> $CM_ENV

      - name: Fetch signing files (App Store distribution)
        script: |
          set -e
          app-store-connect fetch-signing-files "$APP_IDENTIFIER" \
            --type IOS_APP_STORE \
            --platform IOS \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --certificate-key "@file:$CERT_KEY_PATH" \
            --p12-password "" \
            --create --delete-stale-profiles --verbose

      - name: Initialize keychain & install certs
        script: |
          set -e
          keychain initialize
          keychain add-certificates

      - name: Detect team and profile info
        script: |
          set -e
          PROFILE_PATH="$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name '*.mobileprovision' | head -n 1)"
          if [ -z "$PROFILE_PATH" ]; then
            echo "No provisioning profile found under ~/Library/MobileDevice/Provisioning Profiles"
            exit 1
          fi
          /usr/bin/security cms -D -i "$PROFILE_PATH" > "$CM_BUILD_DIR/profile.plist"
          TEAM_ID="$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' "$CM_BUILD_DIR/profile.plist")"
          PROFILE_NAME="$(/usr/libexec/PlistBuddy -c 'Print Name' "$CM_BUILD_DIR/profile.plist")"
          echo "TEAM_ID=$TEAM_ID" >> $CM_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV
          echo "PROFILE_PATH=$PROFILE_PATH" >> $CM_ENV
          echo "Detected Team: $TEAM_ID"
          echo "Profile name:  $PROFILE_NAME"
          echo "Profile path:  $PROFILE_PATH"

      - name: Clean build
        script: |
          xcodebuild clean \
            -workspace ios/App/App.xcworkspace \
            -scheme "$XCODE_SCHEME" \
            -configuration Release

      - name: Archive (App manual; Pods no-sign)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          : "${APP_IDENTIFIER:?Missing APP_IDENTIFIER}"
          : "${TEAM_ID:?Missing TEAM_ID}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"
          : "${PROFILE_PATH:?Missing PROFILE_PATH}"

          echo "Archiving with App manual signing and Pods no-sign..."
          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath "$ARCHIVE_PATH" \
            -sdk iphoneos \
            archive \
            CODE_SIGN_STYLE= \
            CODE_SIGN_IDENTITY= \
            PROVISIONING_PROFILE_SPECIFIER= \
            PROVISIONING_PROFILE= \
            DEVELOPMENT_TEAM= \
            "App:PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "App:DEVELOPMENT_TEAM=$TEAM_ID" \
            "App:CODE_SIGN_STYLE=Manual" \
            "App:CODE_SIGN_IDENTITY=Apple Distribution" \
            "App:PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            "App:PROVISIONING_PROFILE=$PROFILE_PATH" \
            "Pods-App:CODE_SIGNING_ALLOWED=NO" \
            "Pods-App:CODE_SIGNING_REQUIRED=NO" \
            "Pods-App:CODE_SIGN_IDENTITY=" \
            "Pods-App:PROVISIONING_PROFILE_SPECIFIER=" \
            "Pods-App:PROVISIONING_PROFILE=" \
            "Capacitor:CODE_SIGNING_ALLOWED=NO" \
            "Capacitor:CODE_SIGNING_REQUIRED=NO" \
            "Capacitor:CODE_SIGN_IDENTITY=" \
            "Capacitor:PROVISIONING_PROFILE_SPECIFIER=" \
            "Capacitor:PROVISIONING_PROFILE=" \
            "CapacitorCordova:CODE_SIGNING_ALLOWED=NO" \
            "CapacitorCordova:CODE_SIGNING_REQUIRED=NO" \
            "CapacitorCordova:CODE_SIGN_IDENTITY=" \
            "CapacitorCordova:PROVISIONING_PROFILE_SPECIFIER=" \
            "CapacitorCordova:PROVISIONING_PROFILE=" \
            COMPILER_INDEX_STORE_ENABLE=NO

          echo "Verifying archive contents..."
          if [ ! -d "$ARCHIVE_PATH/Products/Applications" ]; then
            echo "Archive missing Products/Applications directory:"
            find "$ARCHIVE_PATH" -maxdepth 3 -type d -print
            exit 1
          fi
          ls -la "$ARCHIVE_PATH/Products/Applications" || true
          APP_BUNDLE="$(find "$ARCHIVE_PATH/Products/Applications" -name '*.app' -maxdepth 1 | head -n 1 || true)"
          if [ -z "$APP_BUNDLE" ]; then
            echo "No .app found in archive. Listing entire archive for clues:"
            find "$ARCHIVE_PATH" -maxdepth 4 -print
            exit 1
          fi
          echo "Found app bundle: $APP_BUNDLE"

      - name: Create ExportOptions.plist (distribution)
        script: |
          set -e
          : "${TEAM_ID:?Missing TEAM_ID}"
          : "${APP_IDENTIFIER:?Missing APP_IDENTIFIER}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"

          cat > "$CM_BUILD_DIR/export_options.plist" <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>signingStyle</key><string>manual</string>
              <key>teamID</key><string>${TEAM_ID}</string>
              <key>signingCertificate</key><string>Apple Distribution</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_IDENTIFIER}</key><string>${PROFILE_NAME}</string>
              </dict>
              <key>compileBitcode</key><false/>
              <key>stripSwiftSymbols</key><true/>
              <key>uploadSymbols</key><true/>
              <key>manageAppVersionAndBuildNumber</key><false/>
            </dict>
          </plist>
          PLIST

          echo "ExportOptions.plist created:"
          cat "$CM_BUILD_DIR/export_options.plist"

      - name: Export IPA (with verbose log)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          EXPORT_DIR="$CM_BUILD_DIR/ipa"
          LOG_PATH="$CM_BUILD_DIR/export.log"
          mkdir -p "$EXPORT_DIR"

          echo "Exporting IPA..."
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$EXPORT_DIR" \
            | tee "$LOG_PATH"

          echo "Export log tail:"
          tail -n 200 "$LOG_PATH" || true

          echo "Listing export dir:"
          ls -la "$EXPORT_DIR" || true

      - name: Upload to App Store Connect (IPA)
        script: |
          set -e
          IPA_PATH=$(ls "$CM_BUILD_DIR/ipa"/*.ipa 2>/dev/null || true)
          echo "Uploading IPA_PATH = [$IPA_PATH] to App Store Connect..."
          if [ -z "$IPA_PATH" ]; then
            echo "No IPA produced. Showing export log for diagnosis:"
            [ -f "$CM_BUILD_DIR/export.log" ] && tail -n 400 "$CM_BUILD_DIR/export.log" || echo "export.log missing"
            exit 1
          fi
          app-store-connect publish \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --path "$IPA_PATH"
          echo "Upload complete."

    artifacts:
      - "**/*.ipa"
      - "ios/App/build/**"
