workflows:
  ios-capacitor:
    name: "iOS Capacitor ‚Üí TestFlight (auto-create signing, App manual / Pods auto)"
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      node: 20
      xcode: latest
      cocoapods: default
      groups:
        - app_store_credentials   # contains: APP_STORE_CONNECT_KEY_IDENTIFIER / _ISSUER_ID / _PRIVATE_KEY
      vars:
        APP_IDENTIFIER: com.fireopscalc.app
        XCODE_SCHEME: App

    scripts:
      - name: "Install dependencies"
        script: |
          echo "Node:" && node -v
          npm ci || npm install --legacy-peer-deps

      - name: "Build web assets"
        script: |
          npm run build || true
          if [ ! -f "dist/index.html" ]; then
            mkdir -p dist
            cp index.html dist/index.html || echo "‚úÖ dist created"
          fi

      - name: "Ensure iOS platform exists & sync"
        script: |
          [ -d ios ] || npx cap add ios
          npx cap sync ios

      - name: "Install CocoaPods"
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install
          cd ../../

      - name: "Generate cert private key"
        script: |
          CERT_KEY_PATH="$CM_BUILD_DIR/cert_private.key"
          openssl genrsa -out "$CERT_KEY_PATH" 2048
          echo "CERT_KEY_PATH=$CERT_KEY_PATH" >> $CM_ENV

      - name: "Fetch signing files (auto-create)"
        script: |
          app-store-connect fetch-signing-files "$APP_IDENTIFIER" \
            --type IOS_APP_STORE \
            --platform IOS \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --certificate-key "@file:$CERT_KEY_PATH" \
            --p12-password "" \
            --create --delete-stale-profiles --verbose

      - name: "Initialize keychain & install certs/profiles"
        script: |
          keychain initialize
          keychain add-certificates

      - name: "Extract TEAM_ID & PROFILE_NAME"
        script: |
          PROFILE_PATH="$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name '*.mobileprovision' | head -n 1)"
          if [ -z "$PROFILE_PATH" ]; then
            echo "‚ùå No provisioning profile found"; exit 1
          fi
          /usr/bin/security cms -D -i "$PROFILE_PATH" > "$CM_BUILD_DIR/profile.plist"
          TEAM_ID="$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' "$CM_BUILD_DIR/profile.plist")"
          PROFILE_NAME="$(/usr/libexec/PlistBuddy -c 'Print Name' "$CM_BUILD_DIR/profile.plist")"
          if [ -z "$TEAM_ID" ] || [ -z "$PROFILE_NAME" ]; then
            echo "‚ùå Failed to parse TeamIdentifier/Name from profile"; exit 1
          fi
          echo "TEAM_ID=$TEAM_ID" >> $CM_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV
          echo "‚úÖ TEAM_ID: $TEAM_ID"
          echo "‚úÖ PROFILE_NAME: $PROFILE_NAME"

      - name: "Patch Pod targets to Automatic signing (safety)"
        script: |
          PROJECT_FILE="ios/App/Pods/Pods.xcodeproj/project.pbxproj"
          if [ -f "$PROJECT_FILE" ]; then
            sed -i '' 's/CODE_SIGN_STYLE = Manual/CODE_SIGN_STYLE = Automatic/g' "$PROJECT_FILE"
            sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PROJECT_FILE"
            echo "‚úÖ Pods set to Automatic signing"
          else
            echo "‚ö†Ô∏è Pods project not found at $PROJECT_FILE"
          fi

      - name: "Create ExportOptions.plist (app-store, manual)"
        script: |
          cat > "$CM_BUILD_DIR/export_options.plist" <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>stripSwiftSymbols</key><true/>
            <key>uploadSymbols</key><true/>
            <key>manageAppVersionAndBuildNumber</key><false/>
          </dict>
          </plist>
          PLIST

      - name: "Clean (verbose)"
        script: |
          set -o pipefail
          xcodebuild \
            -workspace "ios/App/App.xcworkspace" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            clean

      - name: "Archive (Pods Automatic, App Manual only)"
        script: |
          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          echo "üèó Archiving (App manual signing only; Pods automatic)‚Ä¶"
          set -o pipefail
          xcodebuild \
            -workspace "ios/App/App.xcworkspace" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            -sdk iphoneos \
            archive \
            "CODE_SIGN_IDENTITY[sdk=iphoneos*]=Apple Distribution" \
            "DEVELOPMENT_TEAM[sdk=iphoneos*]=$TEAM_ID" \
            "PRODUCT_BUNDLE_IDENTIFIER[sdk=iphoneos*]=$APP_IDENTIFIER" \
            "CODE_SIGN_STYLE[sdk=iphoneos*]=Manual" \
            "PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]=$PROFILE_NAME" \
            "Pods-App.CODE_SIGN_STYLE=Automatic" \
            "Capacitor.CODE_SIGN_STYLE=Automatic" \
            "CapacitorCordova.CODE_SIGN_STYLE=Automatic" \
            "Pods-App.PROVISIONING_PROFILE_SPECIFIER=" \
            "Capacitor.PROVISIONING_PROFILE_SPECIFIER=" \
            "CapacitorCordova.PROVISIONING_PROFILE_SPECIFIER=" \
            COMPILER_INDEX_STORE_ENABLE=NO

      - name: "Export IPA (verbose)"
        script: |
          set -o pipefail
          mkdir -p "$CM_BUILD_DIR/ipa"
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$CM_BUILD_DIR/ipa"
          ls -la "$CM_BUILD_DIR/ipa"

      - name: "Publish to TestFlight"
        script: |
          IPA_PATH="$(find "$CM_BUILD_DIR/ipa" -name '*.ipa' | head -n 1)"
          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå No IPA found to upload"; exit 1
          fi
          echo "üöÄ Uploading $IPA_PATH"
          app-store-connect publish \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --path "$IPA_PATH" \
            --submit-to-testflight

    artifacts:
      - "**/*.ipa"
      - "ios/App/build/**"
