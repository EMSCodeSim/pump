workflows:
  ios_release:
    name: FireOpsCalc iOS Release
    instance_type: mac_mini_m2
    max_build_duration: 60

    integrations:
      app_store_connect: FireCalc

    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        WORKSPACE: "ios/App/App.xcworkspace"
        SCHEME: "App"
        TEAM_ID: "QZ55W58398"
        BUNDLE_ID: "com.fireopscalc.app"
        GOOD_PROFILE_NAME: "FireOpsCalcprofile"   # <- this is the one you actually have
        ARCHIVE_PATH: "/Users/builder/clone/build/App.xcarchive"
        EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

      ios_signing:
        certificates:
          - FireCalcCertiicate          # <- keep the exact typo, that's what Codemagic has
        provisioning_profiles:
          - FireOpsCalcprofile          # <- the one we want Xcode to use

    scripts:
      - name: "0) show what Codemagic mounted"
        script: |
          echo "CM_PROVISIONING_PROFILES_DIR='$CM_PROVISIONING_PROFILES_DIR'"
          echo "Certificates:"
          ls -la /Users/builder/Library/MobileDevice/Certificates 2>/dev/null || true
          echo "Profiles (mounted):"
          ls -la "$CM_PROVISIONING_PROFILES_DIR" 2>/dev/null || true

      - name: "1) copy mounted profiles to Xcode's dir"
        script: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          if [ -n "$CM_PROVISIONING_PROFILES_DIR" ] && [ -d "$CM_PROVISIONING_PROFILES_DIR" ]; then
            cp "$CM_PROVISIONING_PROFILES_DIR"/*.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles"/ 2>/dev/null || true
          else
            echo "⚠️ no CM_PROVISIONING_PROFILES_DIR mounted"
          fi
          echo "Profiles in Xcode dir now:"
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      - name: "2) install Node deps & build web (if any)"
        script: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci || npm install
            else
              npm install
            fi
            npm run build --if-present
          else
            echo "no package.json, skipping web build"
          fi

      - name: "3) Capacitor sync iOS"
        script: |
          if [ -f capacitor.config.ts ] || [ -f capacitor.config.json ] || [ -f capacitor.config.js ]; then
            npx cap sync ios
          else
            echo "no capacitor config found, assuming native is already there"
          fi
          echo "=== ios/App/App after sync ==="
          ls -la ios/App/App || true

      - name: "4) install CocoaPods"
        script: |
          cd ios/App
          pod install --repo-update || pod install
          cd ../..

      - name: "5) PATCH project.pbxproj to use the profile you actually have"
        script: |
          PBX="ios/App/App.xcodeproj/project.pbxproj"
          echo "Patching $PBX ..."
          if [ ! -f "$PBX" ]; then
            echo "❌ $PBX not found"
            exit 1
          fi
          python3 - <<'PY'
from pathlib import Path

pbx = Path("ios/App/App.xcodeproj/project.pbxproj")
text = pbx.read_text()

old = "FireOpsCalcApp_AppStore"   # the bad one still in your project
new = "FireOpsCalcprofile"        # the one Codemagic actually has

if old in text:
    text = text.replace(old, new)
    pbx.write_text(text)
    print(f"✅ replaced '{old}' -> '{new}'")
else:
    print(f"ℹ️ '{old}' not found, nothing to replace")
PY
          echo "=== verify ==="
          grep -n "FireOpsCalc" ios/App/App.xcodeproj/project.pbxproj || true

      - name: "6) create ExportOptions.plist (App Store)"
        script: |
          EXPORT_PLIST="/Users/builder/export_options.plist"
          rm -f "$EXPORT_PLIST"
          /usr/bin/plutil -create xml1 "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :method string app-store" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :teamID string $TEAM_ID" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :uploadBitcode bool false" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :compileBitcode bool false" "$EXPORT_PLIST"
          echo "=== ExportOptions.plist ==="
          /usr/libexec/PlistBuddy -c "Print" "$EXPORT_PLIST"

      - name: "7) archive with Xcode (LET THE PROJECT USE ITS PROFILE)"
        script: |
          set -e
          mkdir -p /Users/builder/clone/build
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath "$ARCHIVE_PATH" \
            archive | xcpretty || true

          if [ ! -d "$ARCHIVE_PATH" ]; then
            echo "❌ Archive was not created at $ARCHIVE_PATH"
            ls -R /Users/builder/clone/build || true
            exit 1
          fi

      - name: "8) export IPA"
        script: |
          set -e
          mkdir -p "$EXPORT_DIR"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist /Users/builder/export_options.plist \
            -exportPath "$EXPORT_DIR" \
            | xcpretty || true

          IPA_PATH="$(ls -1t "$EXPORT_DIR"/*.ipa 2>/dev/null | head -n 1)"
          if [ -z "$IPA_PATH" ]; then
            echo "❌ No IPA created"
            ls -la "$EXPORT_DIR" || true
            exit 1
          fi
          mv -f "$IPA_PATH" "$EXPORT_DIR/$IPA_NAME"
          echo "✅ IPA ready: $EXPORT_DIR/$IPA_NAME"

    artifacts:
      - "$EXPORT_DIR/$IPA_NAME"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testers
