workflows:
  ios_release:
    name: iOS Release (App Store Connect)
    max_build_duration: 120

    environment:
      xcode: 16.4
      cocoapods: default
      node: latest
      ruby: default

      vars:
        # üîß App identifiers
        APP_IDENTIFIER: com.fireopscalc.app
        TEAM_ID: QZ55W58398
        XCODE_SCHEME: App

        # üîê App Store Connect API key values
        APP_STORE_CONNECT_KEY_IDENTIFIER: 82567339RS
        APP_STORE_CONNECT_ISSUER_ID: a786600e-e10a-42b2-a2bf-443a1da2554b
        APP_STORE_CONNECT_PRIVATE_KEY: |
          -----BEGIN PRIVATE KEY-----
          (paste your full .p8 key here)
          -----END PRIVATE KEY-----

    scripts:
      # ‚úÖ Verify App Store Connect vars
      - name: Preflight ‚Äî verify App Store Connect vars
        script: |
          set -euo pipefail
          missing=0
          for v in APP_STORE_CONNECT_PRIVATE_KEY APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_ISSUER_ID; do
            if [ -z "${!v:-}" ]; then
              echo "‚ùå Missing required env var: $v"
              missing=1
            fi
          done
          [ $missing -eq 0 ] || { echo "Aborting due to missing App Store Connect variables."; exit 1; }
          echo "‚úÖ App Store Connect variables present."

      # üì¶ Install dependencies if any
      - name: Install dependencies
        script: |
          set -e
          if [ -f package.json ]; then
            npm ci
            npm run build || true
          fi

      # üì¶ Install CocoaPods
      - name: Pod install
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install --verbose
          cd ../..

      # üîé Locate provisioning profile for the App
      - name: Locate App Store provisioning profile
        script: |
          set -euo pipefail
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          [ -d "$PROFILES_DIR" ] || { echo "‚ùå No provisioning profiles dir found"; exit 1; }

          BEST_PROFILE=""
          BEST_MTIME=0
          for p in "$PROFILES_DIR"/*.mobileprovision; do
            [ -e "$p" ] || continue
            TMP_PLIST="$CM_BUILD_DIR/profile.plist"
            /usr/bin/security cms -D -i "$p" > "$TMP_PLIST"
            BID=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$TMP_PLIST" 2>/dev/null || true)
            NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$TMP_PLIST" 2>/dev/null || true)
            if [[ "$BID" == *"$APP_IDENTIFIER" ]]; then
              MTIME=$(stat -f "%m" "$p" 2>/dev/null || echo 0)
              if [ "$MTIME" -gt "$BEST_MTIME" ]; then
                BEST_MTIME="$MTIME"
                BEST_PROFILE="$p"
                BEST_PROFILE_NAME="$NAME"
              fi
            fi
          done

          if [ -z "$BEST_PROFILE" ]; then
            echo "‚ùå No App Store provisioning profile found for $APP_IDENTIFIER"
            exit 1
          fi
          echo "‚úÖ Using profile: $BEST_PROFILE_NAME"
          echo "PROFILE_PATH=$BEST_PROFILE" >> $CM_ENV
          echo "PROFILE_NAME=$BEST_PROFILE_NAME" >> $CM_ENV

      # üßæ Write export options
      - name: Write export options
        script: |
          cat > "$CM_BUILD_DIR/export_options.plist" <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>signingStyle</key><string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_IDENTIFIER}</key><string>${PROFILE_NAME}</string>
              </dict>
              <key>uploadSymbols</key><true/>
              <key>stripSwiftSymbols</key><true/>
            </dict>
          </plist>
          PLIST

      # üèó Build & Archive
      - name: Build & Archive app (Manual signing)
        script: |
          set -e
          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          echo "üì¶ Archiving to $ARCHIVE_PATH"

          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination generic/platform=iOS \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            "App:PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "App:DEVELOPMENT_TEAM=$TEAM_ID" \
            "App:CODE_SIGN_STYLE=Manual" \
            "App:CODE_SIGN_IDENTITY=Apple Distribution" \
            "App:PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            COMPILER_INDEX_STORE_ENABLE=NO

          if [ ! -d "$ARCHIVE_PATH" ]; then
            echo "‚ùå Archive not found at $ARCHIVE_PATH"
            exit 1
          fi
          echo "‚úÖ Archive finished."

      # üì¶ Export IPA
      - name: Export IPA
        script: |
          set -e
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$CM_BUILD_DIR/ipa"
          ls -lah "$CM_BUILD_DIR/ipa" || true
          echo "‚úÖ IPA exported."

      # üöÄ Upload to App Store Connect
      - name: Upload to App Store Connect
        script: |
          set -e
          IPA_PATH="$CM_BUILD_DIR/ipa/App.ipa"
          [ -f "$IPA_PATH" ] || { echo "‚ùå No IPA found at $IPA_PATH"; exit 1; }

          app-store-connect publish \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --path "$IPA_PATH"

          echo "‚úÖ Upload complete."

    artifacts:
      - $CM_BUILD_DIR/ipa/*.ipa
      - $CM_BUILD_DIR/App.xcarchive
