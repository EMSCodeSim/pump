workflows:
  ios_release:
    name: iOS Release (API key env vars)
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        # --- App identity ---
        PRODUCT_BUNDLE_IDENTIFIER: "com.fireopscalc.app"
        DEVELOPMENT_TEAM: "QZ55W58398"
        WORKSPACE: "ios/App/App.xcworkspace"
        SCHEME: "App"

        # --- Paths ---
        ARCHIVE_PATH: "/Users/builder/clone/build/App.xcarchive"
        DERIVED_DATA: "/Users/builder/clone/DerivedData"
        IPA_EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

        # Toggle TestFlight upload (true/false)
        PUBLISH_TO_TESTFLIGHT: "true"

      # REQUIRED ENV VARS (set these in App settings → Environment variables)
      # - APP_STORE_CONNECT_KEY_IDENTIFIER  (Key ID, e.g. ABC123XYZ)
      # - APP_STORE_CONNECT_ISSUER_ID       (Issuer ID UUID)
      # - APP_STORE_CONNECT_PRIVATE_KEY     (entire .p8 contents with BEGIN/END lines, Secure + multiline)

    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/App/Pods
        - node_modules

    scripts:
      - name: Tool versions
        script: |
          set -e
          echo "Node $(node -v)"; echo "npm $(npm -v)"
          pod --version
          app-store-connect --version || true
          xcodebuild -version

      - name: Install dependencies
        script: |
          set -e
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Build web assets (if script exists)
        script: |
          set -e
          if npm run | grep -qE '^ *build($|:)'; then
            npm run build
          elif npm run | grep -qE '^ *build:web($|:)'; then
            npm run build:web
          else
            echo "No build script found; skipping."
          fi

      - name: Sync Capacitor iOS
        script: |
          set -e
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install
          cd -

      # 🔐 Install certs/profiles you attached in App settings → Code signing → iOS
      - name: Install signing assets from App settings
        script: |
          set -e
          keychain add-certificates          # installs your .p12 into the build keychain
          profile install                    # installs selected provisioning profiles
          xcode-project use-profiles --warn-only

      - name: Build iOS archive (Release)
        script: |
          set -e
          mkdir -p "$(dirname "$ARCHIVE_PATH")"
          echo "Building archive to: $ARCHIVE_PATH"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -derivedDataPath "$DERIVED_DATA" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$PRODUCT_BUNDLE_IDENTIFIER" \
            -allowProvisioningUpdates \
            clean archive | xcpretty

      - name: Export IPA (App Store)
        script: |
          set -e
          mkdir -p "$IPA_EXPORT_DIR"
          cat > ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>automatic</string>
            <key>uploadSymbols</key><true/>
            <key>manageAppVersionAndBuildNumber</key><true/>
            <key>stripSwiftSymbols</key><true/>
          </dict>
          </plist>
          PLIST
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$IPA_EXPORT_DIR" | xcpretty

          IPA="$(ls "$IPA_EXPORT_DIR"/*.ipa | head -n1 || true)"
          if [ -f "$IPA" ]; then
            mv "$IPA" "$IPA_EXPORT_DIR/$IPA_NAME"
            echo "IPA at: $IPA_EXPORT_DIR/$IPA_NAME"
          else
            echo "No .ipa produced!"
            exit 1
          fi

      - name: Publish to TestFlight (using API key env vars)
        script: |
          if [ "$PUBLISH_TO_TESTFLIGHT" != "true" ]; then
            echo "Skipping TestFlight upload."
            exit 0
          fi
          # app-store-connect CLI reads APP_STORE_CONNECT_* env vars automatically
          app-store-connect publish \
            --type IOS \
            --bundle-id "$PRODUCT_BUNDLE_IDENTIFIER" \
            --path "$IPA_EXPORT_DIR/$IPA_NAME"

    artifacts:
      - $ARCHIVE_PATH
      - $IPA_EXPORT_DIR/$IPA_NAME
      - $DERIVED_DATA/Logs/**/*
      - ExportOptions.plist

    publishing:
      # Using API key via env vars; no integration reference here.
      app_store_connect:
        auth: api_key
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        private_key: $APP_STORE_CONNECT_PRIVATE_KEY
        submit_to_testflight: true
