workflows:
  ios_release:
    name: iOS Release (ASC upload)
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      groups:
        - app_store_credentials   # contains APP_STORE_CONNECT_PRIVATE_KEY, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_ISSUER_ID
      vars:
        APP_IDENTIFIER: "com.fireopscalc.app"      # <- make sure this matches your Xcode target bundle id
        TEAM_ID: "QZ55W58398"
        XCODE_SCHEME: "App"
      xcode: 16.4
      cocoapods: default
      node: latest
      ruby: default

    scripts:
      - name: Preflight — verify App Store Connect vars are present
        script: |
          set -euo pipefail
          missing=0
          for v in APP_STORE_CONNECT_PRIVATE_KEY APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_ISSUER_ID; do
            if [ -z "${!v:-}" ]; then
              echo "❌ Missing $v (expected from secure group 'app_store_credentials')"
              missing=1
            else
              # print redacted length to confirm content without leaking
              len=${#${v}}
              echo "✅ $v present (length: ${#v})"
            fi
          done
          [ "$missing" -eq 0 ] || exit 1

      - name: Install deps / build web (optional)
        script: |
          set -e
          if [ -f package.json ]; then
            npm ci
            npm run build || true
          fi

      - name: Pod install
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install
          cd ../..

      - name: Select provisioning profile for App Store
        script: |
          set -euo pipefail
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          [ -d "$PROFILES_DIR" ] || { echo "❌ $PROFILES_DIR not found"; exit 1; }
          BEST_PROFILE=""
          BEST_NAME=""
          BEST_MTIME=0
          for p in "$PROFILES_DIR"/*.mobileprovision; do
            [ -e "$p" ] || continue
            TMP="$CM_BUILD_DIR/profile.plist"
            /usr/bin/security cms -D -i "$p" > "$TMP" || continue
            AID=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$TMP" 2>/dev/null || true)
            NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$TMP" 2>/dev/null || true)
            ALL=$(/usr/libexec/PlistBuddy -c "Print ProvisionsAllDevices" "$TMP" 2>/dev/null || echo "false")
            DEV=$(/usr/libexec/PlistBuddy -c "Print ProvisionedDevices" "$TMP" 2>/dev/null || true)
            [[ "$AID" == *".$APP_IDENTIFIER" ]] || continue
            # App Store profile: no devices and not enterprise
            if echo "$DEV" | grep -q "<array>"; then continue; fi
            if [ "$ALL" = "true" ]; then continue; fi
            MTIME=$(stat -f "%m" "$p" 2>/dev/null || echo 0)
            if [ "$MTIME" -gt "$BEST_MTIME" ]; then
              BEST_MTIME="$MTIME"; BEST_PROFILE="$p"; BEST_NAME="$NAME"
            fi
          done
          [ -n "$BEST_PROFILE" ] || { echo "❌ No App Store profile found for $APP_IDENTIFIER"; exit 1; }
          echo "PROFILE_PATH=$BEST_PROFILE" >> $CM_ENV
          echo "PROFILE_NAME=$BEST_NAME" >> $CM_ENV
          echo "✅ Using profile: $BEST_NAME"

      - name: Write export options (app-store)
        script: |
          cat > "$CM_BUILD_DIR/export_options.plist" <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>uploadSymbols</key><true/>
              <key>compileBitcode</key><false/>
              <key>signingStyle</key><string>manual</string>
              <key>stripSwiftSymbols</key><true/>
            </dict>
          </plist>
          PLIST

      - name: Archive (App manual; Pods signing disabled)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath "$ARCHIVE_PATH" \
            -sdk iphoneos \
            archive \
            "App:PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "App:DEVELOPMENT_TEAM=$TEAM_ID" \
            "App:CODE_SIGN_STYLE=Manual" \
            "App:CODE_SIGN_IDENTITY=Apple Distribution" \
            "App:PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            "App:PROVISIONING_PROFILE=$PROFILE_PATH" \
            "Pods-App:CODE_SIGNING_ALLOWED=NO" \
            "Pods-App:CODE_SIGNING_REQUIRED=NO" \
            "Pods-App:CODE_SIGN_IDENTITY=" \
            "Pods-App:PROVISIONING_PROFILE_SPECIFIER=" \
            "Pods-App:PROVISIONING_PROFILE=" \
            "Capacitor:CODE_SIGNING_ALLOWED=NO" \
            "Capacitor:CODE_SIGNING_REQUIRED=NO" \
            "Capacitor:CODE_SIGN_IDENTITY=" \
            "Capacitor:PROVISIONING_PROFILE_SPECIFIER=" \
            "Capacitor:PROVISIONING_PROFILE=" \
            "CapacitorCordova:CODE_SIGNING_ALLOWED=NO" \
            "CapacitorCordova:CODE_SIGNING_REQUIRED=NO" \
            "CapacitorCordova:CODE_SIGN_IDENTITY=" \
            "CapacitorCordova:PROVISIONING_PROFILE_SPECIFIER=" \
            "CapacitorCordova:PROVISIONING_PROFILE=" \
            COMPILER_INDEX_STORE_ENABLE=NO

      - name: Export IPA
        script: |
          set -euo pipefail
          EXPORT_DIR="$CM_BUILD_DIR/ipa"
          mkdir -p "$EXPORT_DIR"
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$EXPORT_DIR"
          echo "IPA_DIR=$EXPORT_DIR" >> $CM_ENV

      - name: Sanity check IPA
        script: |
          set -euo pipefail
          IPA_PATH=$(ls "$IPA_DIR"/*.ipa 2>/dev/null || true)
          [ -n "$IPA_PATH" ] || { echo "❌ No IPA produced"; exit 1; }
          unzip -q "$IPA_PATH" -d "$CM_BUILD_DIR/ipa_check"
          APP_DIR=$(find "$CM_BUILD_DIR/ipa_check/Payload" -maxdepth 1 -name '*.app' | head -n 1)
          BID=$(/usr/libexec/PlistBuddy -c 'Print CFBundleIdentifier' "$APP_DIR/Info.plist")
          echo "IPA CFBundleIdentifier: $BID"
          [ "$BID" = "$APP_IDENTIFIER" ] || { echo "❌ Bundle id mismatch"; exit 1; }
          echo "IPA_PATH=$IPA_PATH" >> $CM_ENV

      - name: Upload to App Store Connect
        script: |
          set -euo pipefail
          app-store-connect publish \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --path "$IPA_PATH"

    artifacts:
      - ipa/*.ipa
      - App.xcarchive
    publishing:
      email:
        recipients:
          - you@example.com
        notify:
          success: true
          failure: true
