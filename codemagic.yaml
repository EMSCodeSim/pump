workflows:
  ios_release:
    name: iOS Release (ASC upload)
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      vars:
        APP_IDENTIFIER: "com.fireopscalc.app"
        TEAM_ID: "QZ55W58398"
        XCODE_SCHEME: "App"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        CONFIGURATION: "Release"
        EXPORT_METHOD: "app-store"
      cocoapods: default
      xcode: latest

    triggering:
      events: [ push ]
      branch_patterns:
        - pattern: main
          include: true
          source: true

    scripts:
      - name: Preflight — resolve & verify App Store Connect vars
        script: |
          set -euo pipefail

          # ---- Resolve from multiple possible names (yesterday's vs today's) ----
          # Private key can be: base64 text, raw p8 text, or a filesystem path to a .p8
          APP_STORE_CONNECT_PRIVATE_KEY_RESOLVED="${APP_STORE_CONNECT_PRIVATE_KEY:-${ASC_PRIVATE_KEY_B64:-${ASC_API_KEY_B64:-}}}"
          APP_STORE_CONNECT_KEY_IDENTIFIER_RESOLVED="${APP_STORE_CONNECT_KEY_IDENTIFIER:-${ASC_KEY_ID:-${APP_STORE_CONNECT_KEY_ID:-}}}"
          APP_STORE_CONNECT_ISSUER_ID_RESOLVED="${APP_STORE_CONNECT_ISSUER_ID:-${ASC_ISSUER_ID:-${APP_STORE_CONNECT_ISSUER_ID:-}}}"

          # Export for later steps
          export APP_STORE_CONNECT_PRIVATE_KEY_RESOLVED APP_STORE_CONNECT_KEY_IDENTIFIER_RESOLVED APP_STORE_CONNECT_ISSUER_ID_RESOLVED

          missing=0
          if [ -z "${APP_STORE_CONNECT_PRIVATE_KEY_RESOLVED:-}" ]; then
            echo "❌ Missing private key (set APP_STORE_CONNECT_PRIVATE_KEY or ASC_PRIVATE_KEY_B64 or ASC_API_KEY_B64)"
            missing=1
          fi
          if [ -z "${APP_STORE_CONNECT_KEY_IDENTIFIER_RESOLVED:-}" ]; then
            echo "❌ Missing key id (set APP_STORE_CONNECT_KEY_IDENTIFIER or ASC_KEY_ID or APP_STORE_CONNECT_KEY_ID)"
            missing=1
          fi
          if [ -z "${APP_STORE_CONNECT_ISSUER_ID_RESOLVED:-}" ]; then
            echo "❌ Missing issuer id (set APP_STORE_CONNECT_ISSUER_ID or ASC_ISSUER_ID)"
            missing=1
          fi

          if [ "$missing" -ne 0 ]; then
            echo "Aborting due to missing App Store Connect variables."
            exit 1
          fi

          echo "✅ ASC vars resolved."

      - name: Create App Store Connect API key file
        script: |
          set -euo pipefail
          mkdir -p "$CM_BUILD_DIR/asc"
          p8_path="$CM_BUILD_DIR/asc/AuthKey_${APP_STORE_CONNECT_KEY_IDENTIFIER_RESOLVED}.p8"

          val="${APP_STORE_CONNECT_PRIVATE_KEY_RESOLVED}"

          if [ -f "$val" ]; then
            # Treat value as a filesystem path to .p8 (Secure file case)
            cp "$val" "$p8_path"
          elif echo "$val" | grep -q "-----BEGIN"; then
            # Raw .p8 text pasted
            printf "%s" "$val" > "$p8_path"
          else
            # Assume base64-encoded
            echo "$val" | base64 --decode > "$p8_path"
          fi

          chmod 600 "$p8_path"
          echo "API key saved at $p8_path"
          echo "export ASC_P8_PATH=$p8_path" >> $CM_ENV
          echo "export ASC_KEY_ID=${APP_STORE_CONNECT_KEY_IDENTIFIER_RESOLVED}" >> $CM_ENV
          echo "export ASC_ISSUER_ID=${APP_STORE_CONNECT_ISSUER_ID_RESOLVED}" >> $CM_ENV

      - name: Fetch App Store provisioning profile for $APP_IDENTIFIER
        script: |
          set -euo pipefail
          cd "$CM_BUILD_DIR/asc"

          app-store-connect fetch-signing-files \
            --type IOS_APP_STORE \
            --bundle-id "$APP_IDENTIFIER" \
            --issuer-id "$ASC_ISSUER_ID" \
            --key-id "$ASC_KEY_ID" \
            --api-key-path "$ASC_P8_PATH" \
            --output-dir "$CM_BUILD_DIR/asc" \
            --create

          PROFILE_PATH="$(ls -1 *.mobileprovision | head -n 1 || true)"
          if [ -z "${PROFILE_PATH:-}" ]; then
            echo "❌ No App Store profile downloaded for $APP_IDENTIFIER"
            exit 1
          fi

          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i "$PROFILE_PATH")")
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp "$PROFILE_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "✅ Installed profile UUID: $PROFILE_UUID"
          echo "export PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV

      - name: Install CocoaPods
        script: |
          set -euo pipefail
          cd ios/App
          pod install

      - name: Archive (manual App signing; disable Pods signing)
        script: |
          set -euo pipefail
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -sdk iphoneos \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$APP_IDENTIFIER" \
            CODE_SIGN_STYLE=Manual \
            "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_UUID" \
            "CODE_SIGN_IDENTITY=Apple Distribution" \
            Pods-App.CODE_SIGNING_ALLOWED=NO \
            Capacitor.CODE_SIGNING_ALLOWED=NO \
            CapacitorCordova.CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            archive | xcpretty

      - name: Export IPA (App Store)
        script: |
          set -euo pipefail
          cat > "$CM_BUILD_DIR/ExportOptions.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>destination</key><string>export</string>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_IDENTIFIER}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>uploadBitcode</key><false/>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/ExportOptions.plist" \
            -exportPath "$CM_BUILD_DIR/ipa" | xcpretty

          ls -lah "$CM_BUILD_DIR/ipa"
          test -f "$CM_BUILD_DIR/ipa/App.ipa" || (echo "❌ IPA not found"; exit 1)

      - name: Upload IPA to App Store Connect (TestFlight)
        script: |
          set -euo pipefail
          app-store-connect publish \
            --path "$CM_BUILD_DIR/ipa/App.ipa" \
            --issuer-id "$ASC_ISSUER_ID" \
            --key-id "$ASC_KEY_ID" \
            --api-key-path "$ASC_P8_PATH"
          echo "✅ Upload submitted to App Store Connect."

    artifacts:
      - ipa/*.ipa
      - App.xcarchive
      - ExportOptions.plist

    publishing:
      email:
        recipients:
          - your@email.com
        notify:
          success: true
          failure: true
