workflows:
  ios_release:
    name: iOS Release (ASC upload)
    instance_type: mac_mini_m2
    max_build_duration: 120

    environment:
      groups:
        # Your screenshots show this group name. If different, change it here.
        - app_store_credentials
        - signing_files
      vars:
        APP_IDENTIFIER: "com.fireopscalc.app"
        TEAM_ID: "QZ55W58398"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        CONFIGURATION: "Release"
        EXPORT_METHOD: "app-store"
      xcode: latest
      cocoapods: default

    cache:
      cache_paths:
        - ios/Pods
        - ~/Library/Caches/CocoaPods

    scripts:
      # 0) Resolve App Store Connect vars (accepts common aliases too)
      - name: Preflight — resolve & verify App Store Connect vars
        script: |
          set -euo pipefail
          pick(){ for v in "$@"; do [ -n "${!v:-}" ] && { echo "${!v}"; return; }; done; return 1; }

          export APP_STORE_CONNECT_PRIVATE_KEY="$(pick APP_STORE_CONNECT_PRIVATE_KEY ASC_PRIVATE_KEY ASC_PRIVATE_KEY_B64 APP_STORE_CONNECT_PRIVATE_KEY_B64 || true)"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$(pick APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_KEY_ID ASC_KEY_ID || true)"
          export APP_STORE_CONNECT_ISSUER_ID="$(pick APP_STORE_CONNECT_ISSUER_ID ASC_ISSUER_ID || true)"

          miss=0
          [ -n "${APP_STORE_CONNECT_PRIVATE_KEY:-}" ] || { echo "❌ Missing PRIVATE KEY"; miss=1; }
          [ -n "${APP_STORE_CONNECT_KEY_IDENTIFIER:-}" ] || { echo "❌ Missing KEY ID"; miss=1; }
          [ -n "${APP_STORE_CONNECT_ISSUER_ID:-}" ] || { echo "❌ Missing ISSUER ID"; miss=1; }
          [ $miss -eq 0 ] || { echo "Aborting due to missing App Store Connect variables."; exit 1; }

          maybe_decode(){ v="$1"; if printf '%s' "$v" | grep -Eq '^[A-Za-z0-9+/=]{80,}$'; then printf '%s' "$v" | base64 --decode || echo "$v"; else echo "$v"; fi; }
          export APP_STORE_CONNECT_PRIVATE_KEY="$(maybe_decode "$APP_STORE_CONNECT_PRIVATE_KEY")"

          echo "✅ ASC variables OK"

      # 1) Install signing assets from env (p12 + profile), into our own keychain
      - name: Install signing certificate & provisioning profile
        script: |
          set -euo pipefail

          if [ -z "${DIST_CERT_P12_B64:-}" ] || [ -z "${DIST_CERT_PASSWORD:-}" ] || [ -z "${APP_STORE_PROFILE_B64:-}" ]; then
            echo "❌ Missing signing files. Ensure DIST_CERT_P12_B64, DIST_CERT_PASSWORD, APP_STORE_PROFILE_B64 exist in group 'signing_files'."
            exit 1
          fi

          CERTS_DIR="$HOME/Library/MobileDevice/Certificates"
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$CERTS_DIR" "$PROFILES_DIR"

          CERT_P12_PATH="$CERTS_DIR/dist.p12"
          PROFILE_PATH="$PROFILES_DIR/app_store.mobileprovision"

          printf '%s' "$DIST_CERT_P12_B64" | base64 --decode > "$CERT_P12_PATH"
          printf '%s' "$APP_STORE_PROFILE_B64" | base64 --decode > "$PROFILE_PATH"

          echo "✅ Wrote certificate to $CERT_P12_PATH"
          echo "✅ Wrote profile to $PROFILE_PATH"

          # Fresh keychain
          keychain initialize
          # Import the p12 into the keychain we just created
          security import "$CERT_P12_PATH" -k "$KEYCHAIN_PATH" -P "$DIST_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security >/dev/null
          # Make sure the identity is usable by codesign
          security set-key-partition-list -S apple-tool:,apple: -k "" "$KEYCHAIN_PATH" >/dev/null

          # Tell Codemagic/Xcode to use the installed provisioning profiles
          xcode-project use-profiles

          echo "✅ Certificate imported and profiles installed"

      # 2) Build IPA
      - name: Build IPA
        script: |
          set -euo pipefail
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME" \
            --archive-flags "-configuration $CONFIGURATION -destination generic/platform=iOS" \
            --export-method "$EXPORT_METHOD"

      # 3) Upload to App Store Connect
      - name: Upload to App Store Connect
        script: |
          set -euo pipefail
          IPA_PATH="$(ls -1 "$CM_BUILD_DIR"/Build/IPA/*.ipa 2>/dev/null | head -n 1 || true)"
          [ -n "$IPA_PATH" ] || { echo "❌ No IPA found"; exit 1; }

          echo "Uploading IPA_PATH = [$IPA_PATH] to App Store Connect..."
          app-store-connect publish \
            --path "$IPA_PATH" \
            --apiKeyId "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --issuerId "$APP_STORE_CONNECT_ISSUER_ID" \
            --privateKey "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --submit-to-testflight=false

    artifacts:
      - $CM_BUILD_DIR/Build/IPA/*.ipa
      - $HOME/Library/Logs/gym/*.log

    publishing:
      email:
        recipients:
          - your@email.com
        notify:
          success: true
          failure: true
