workflows:
  ios_release:
    name: iOS Release (App Store Connect)
    max_build_duration: 120

    environment:
      xcode: 16.4
      cocoapods: default
      node: latest
      ruby: default
      vars:
        # üîß App
        APP_IDENTIFIER: com.fireopscalc.app
        TEAM_ID: QZ55W58398
        XCODE_SCHEME: App

        # üîê App Store Connect API key (the .p8 one ‚Äî NOT p12)
        APP_STORE_CONNECT_KEY_IDENTIFIER: 82567339RS
        APP_STORE_CONNECT_ISSUER_ID: a786600e-e10a-42b2-a2bf-443a1da2554b
        APP_STORE_CONNECT_PRIVATE_KEY: |
          -----BEGIN PRIVATE KEY-----
          (paste your full .p8 key here)
          -----END PRIVATE KEY-----

        # (Optional but recommended) Provide your .p12 cert as base64 and its password.
        # DIST_CERT_P12_B64: <base64_of_your_Apple_Distribution.p12>
        # DIST_CERT_PASSWORD: <p12_password>

        # (Optional, easiest) Provide your App Store provisioning profile as base64.
        # APP_STORE_PROFILE_B64: <base64_of_your_AppStore.mobileprovision>

    scripts:
      # 1) Preflight ASC vars
      - name: Preflight ‚Äî verify App Store Connect vars
        script: |
          set -euo pipefail
          miss=0
          for v in APP_STORE_CONNECT_PRIVATE_KEY APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_ISSUER_ID; do
            if [ -z "${!v:-}" ]; then echo "‚ùå Missing $v"; miss=1; fi
          done
          [ $miss -eq 0 ] || { echo "Aborting due to missing App Store Connect variables."; exit 1; }
          echo "‚úÖ App Store Connect variables present."

      # 2) (Optional) Set up keychain & import the Apple Distribution certificate (.p12)
      - name: Set up keychain & import distribution certificate (optional)
        script: |
          set -euo pipefail
          if [ -n "${DIST_CERT_P12_B64:-}" ] && [ -n "${DIST_CERT_PASSWORD:-}" ]; then
            KEYCHAIN="$HOME/Library/codemagic-cli-tools/keychains/codemagic.keychain-db"
            KEYCHAIN_PW="cmagic$(uuidgen | tr -d -)"
            security create-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN"
            security set-keychain-settings -lut 21600 "$KEYCHAIN"
            security unlock-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN"
            security list-keychains -d user -s "$KEYCHAIN" $(security list-keychains -d user | sed 's/[""]//g')
            echo "$DIST_CERT_P12_B64" | base64 --decode > "$CM_BUILD_DIR/dist.p12"
            security import "$CM_BUILD_DIR/dist.p12" -k "$KEYCHAIN" -P "$DIST_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
            security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PW" "$KEYCHAIN"
            echo "‚úÖ Distribution certificate imported."
          else
            echo "‚ÑπÔ∏è Skipping cert import (DIST_CERT_P12_B64 or DIST_CERT_PASSWORD not set)."
          fi

      # 3) Install CocoaPods
      - name: Pod install
        script: |
          set -e
          cd ios/App
          pod repo update
          pod install --verbose
          cd ../..

      # 4) Resolve & install the App Store provisioning profile
      - name: Resolve App Store provisioning profile
        script: |
          set -euo pipefail
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_DIR"

          # (a) Prefer profile from env (base64)
          if [ -n "${APP_STORE_PROFILE_B64:-}" ]; then
            TARGET="$PROFILES_DIR/AppStore_${APP_IDENTIFIER}.mobileprovision"
            echo "$APP_STORE_PROFILE_B64" | base64 --decode > "$TARGET"
            echo "‚úÖ Installed App Store profile from env to $TARGET"
            PROFILE_PATH="$TARGET"
          # (b) Or use a checked-in profile if present
          elif [ -f "ios/App/AppStore.mobileprovision" ]; then
            TARGET="$PROFILES_DIR/AppStore_${APP_IDENTIFIER}.mobileprovision"
            cp "ios/App/AppStore.mobileprovision" "$TARGET"
            echo "‚úÖ Installed checked-in AppStore.mobileprovision to $TARGET"
            PROFILE_PATH="$TARGET"
          # (c) Else try to find an existing one in the VM
          else
            echo "‚ÑπÔ∏è Searching existing profiles for $APP_IDENTIFIER"
            PROFILE_PATH=""
            NEWEST_MTIME=0
            for p in "$PROFILES_DIR"/*.mobileprovision; do
              [ -e "$p" ] || continue
              TMP_PLIST="$CM_BUILD_DIR/profile.plist"
              /usr/bin/security cms -D -i "$p" > "$TMP_PLIST" || continue
              BID=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$TMP_PLIST" 2>/dev/null || true)
              PROVISIONS_ALL=$(/usr/libexec/PlistBuddy -c "Print ProvisionsAllDevices" "$TMP_PLIST" 2>/dev/null || echo "false")
              PROV_DEVICES=$(/usr/libexec/PlistBuddy -c "Print ProvisionedDevices" "$TMP_PLIST" 2>/dev/null || true)
              if [[ "$BID" == *".$APP_IDENTIFIER" ]] || [[ "$BID" == "$TEAM_ID.$APP_IDENTIFIER" ]]; then
                # Prefer App Store (not ad hoc, not enterprise)
                if [ "$PROVISIONS_ALL" != "true" ] && ! echo "$PROV_DEVICES" | grep -q "<array>"; then
                  MTIME=$(stat -f "%m" "$p" 2>/dev/null || echo 0)
                  if [ "$MTIME" -gt "$NEWEST_MTIME" ]; then
                    NEWEST_MTIME=$MTIME
                    PROFILE_PATH="$p"
                  fi
                fi
              fi
            done
            if [ -z "$PROFILE_PATH" ]; then
              echo "‚ùå No App Store provisioning profile found for $APP_IDENTIFIER"
              echo "üëâ Fix: add APP_STORE_PROFILE_B64 env var (base64 of your .mobileprovision) or commit ios/App/AppStore.mobileprovision"
              exit 1
            fi
          fi

          # Extract profile Name for PROVISIONING_PROFILE_SPECIFIER
          TMP_PLIST="$CM_BUILD_DIR/profile_selected.plist"
          /usr/bin/security cms -D -i "$PROFILE_PATH" > "$TMP_PLIST"
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$TMP_PLIST")
          echo "‚úÖ Using provisioning profile: $PROFILE_NAME"
          {
            echo "PROFILE_PATH=$PROFILE_PATH"
            echo "PROFILE_NAME=$PROFILE_NAME"
          } >> "$CM_ENV"

      # 5) Write export options (manual + profile map)
      - name: Write export options
        script: |
          cat > "$CM_BUILD_DIR/export_options.plist" <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>signingStyle</key><string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${APP_IDENTIFIER}</key><string>${PROFILE_NAME}</string>
              </dict>
              <key>uploadSymbols</key><true/>
              <key>stripSwiftSymbols</key><true/>
            </dict>
          </plist>
          PLIST
          echo "‚úÖ export_options.plist written."

      # 6) Build & Archive with manual signing for App only (Pods unsigned)
      - name: Build & Archive app (Manual signing)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          echo "üì¶ Archiving to $ARCHIVE_PATH"

          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination generic/platform=iOS \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            "App:PRODUCT_BUNDLE_IDENTIFIER=$APP_IDENTIFIER" \
            "App:DEVELOPMENT_TEAM=$TEAM_ID" \
            "App:CODE_SIGN_STYLE=Manual" \
            "App:CODE_SIGN_IDENTITY=Apple Distribution" \
            "App:PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" \
            "Pods-App:CODE_SIGNING_ALLOWED=NO" \
            "Capacitor:CODE_SIGNING_ALLOWED=NO" \
            "CapacitorCordova:CODE_SIGNING_ALLOWED=NO" \
            COMPILER_INDEX_STORE_ENABLE=NO

          [ -d "$ARCHIVE_PATH" ] || { echo "‚ùå Archive not found at $ARCHIVE_PATH"; exit 1; }
          echo "‚úÖ Archive finished."

      # 7) Export IPA
      - name: Export IPA
        script: |
          set -e
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$CM_BUILD_DIR/ipa"
          ls -lah "$CM_BUILD_DIR/ipa"
          echo "‚úÖ IPA exported."

      # 8) Upload to App Store Connect (uses .p8 API key)
      - name: Upload to App Store Connect
        script: |
          set -e
          IPA_PATH="$CM_BUILD_DIR/ipa/App.ipa"
          [ -f "$IPA_PATH" ] || { echo "‚ùå No IPA found at $IPA_PATH"; exit 1; }
          app-store-connect publish \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --path "$IPA_PATH"
          echo "‚úÖ Upload complete."

    artifacts:
      - $CM_BUILD_DIR/ipa/*.ipa
      - $CM_BUILD_DIR/App.xcarchive
