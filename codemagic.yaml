workflows:
  ios_release:
    name: iOS Release (App Store / TestFlight)
    max_build_duration: 60
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        # === iOS app identity ===
        PRODUCT_BUNDLE_IDENTIFIER: "com.fireopscalc.app"
        DEVELOPMENT_TEAM: "QZ55W58398"
        SCHEME: "App"
        WORKSPACE: "ios/App/App.xcworkspace"
        ARCHIVE_PATH: "/Users/builder/clone/build/App.xcarchive"
        DERIVED_DATA: "/Users/builder/clone/DerivedData"
        IPA_EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

        # Toggle upload to TestFlight (true/false)
        PUBLISH_TO_TESTFLIGHT: "true"

    cache:
      cache_paths:
        - ~/.gradle/caches
        - ~/.gradle/wrapper
        - ~/.pub-cache
        - $HOME/Library/Caches/CocoaPods
        - ios/App/Pods
        - node_modules

    scripts:
      # 1) Show tool versions
      - name: Show tool versions
        script: |
          echo "Node $(node -v)"
          echo "NPM  $(npm -v)"
          pod --version
          xcodebuild -version

      # 2) Install JS deps
      - name: Install dependencies
        script: |
          npm ci

      # 3) Build web assets (tries common scripts)
        # If your project uses a different build cmd, edit below.
      - name: Build web assets (try common scripts)
        script: |
          set -e
          if npm run | grep -qE '^ *build:'; then
            npm run build
          elif npm run | grep -qE '^ *build$'; then
            npm run build
          else
            echo "No build script found, skipping."
          fi

      # 4) Capacitor sync
      - name: Sync Capacitor iOS
        script: |
          npx cap sync ios

      # 5) CocoaPods
      - name: Install CocoaPods
        script: |
          cd ios/App
          pod repo update
          pod install
          cd -

      # 6) Fetch signing files FROM Apple (uses Codemagic Developer Portal integration)
      - name: Fetch signing files from App Store Connect
        script: |
          set -e
          app-store-connect --version
          app-store-connect fetch-signing-files \
            --type IOS_APP_STORE \
            --bundleId "$PRODUCT_BUNDLE_IDENTIFIER" \
            --create
          # Point the Xcode project/workspace to the fetched profiles
          xcode-project use-profiles --warn-only

      # 7) Build archive
      - name: Build iOS archive (Release)
        script: |
          set -e
          mkdir -p "$(dirname "$ARCHIVE_PATH")"
          echo "Building archive to: $ARCHIVE_PATH"
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -derivedDataPath "$DERIVED_DATA" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$PRODUCT_BUNDLE_IDENTIFIER" \
            -allowProvisioningUpdates \
            clean archive | xcpretty

      # 8) Export IPA
      - name: Export IPA (App Store)
        script: |
          set -e
          mkdir -p "$IPA_EXPORT_DIR"
          cat > ExportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>automatic</string>
            <key>uploadSymbols</key><true/>
            <key>manageAppVersionAndBuildNumber</key><true/>
            <key>stripSwiftSymbols</key><true/>
          </dict>
          </plist>
          PLIST
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$IPA_EXPORT_DIR" | xcpretty

          # Rename exported IPA to a stable name if necessary
          EXPORTED="$(ls "$IPA_EXPORT_DIR"/*.ipa | head -n1)"
          if [ -f "$EXPORTED" ]; then
            mv "$EXPORTED" "$IPA_EXPORT_DIR/$IPA_NAME"
            echo "IPA at: $IPA_EXPORT_DIR/$IPA_NAME"
          else
            echo "No .ipa produced!"
            exit 1
          fi

      # 9) (Optional) Upload to TestFlight
      - name: Publish to TestFlight (optional)
        script: |
          if [ "$PUBLISH_TO_TESTFLIGHT" != "true" ]; then
            echo "Skipping TestFlight upload."
            exit 0
          fi
          app-store-connect publish \
            --type IOS \
            --bundleId "$PRODUCT_BUNDLE_IDENTIFIER" \
            --path "$IPA_EXPORT_DIR/$IPA_NAME"

    artifacts:
      - build/**/*
      - Export/**/*
      - $IPA_EXPORT_DIR/$IPA_NAME
      - $DERIVED_DATA/Logs/**/*
      - ExportOptions.plist

    publishing:
      # Keep this section minimal; the upload is done in scripts.
      email:
        recipients:
          - "you@example.com"
        notify:
          success: true
          failure: true
