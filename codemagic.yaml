workflows:
  ios_release:
    name: FireOpsCalc iOS Release (with signing fetch)
    instance_type: mac_mini_m2
    max_build_duration: 60

    triggering:
      events:
        - push
        - tag
      branch_patterns:
        - pattern: main
          include: true
          source: true

    integrations:
      app_store_connect: FireCalc   # ‚Üê this is the one you already have

    environment:
      xcode: 16.4
      cocoapods: default
      node: 20.11.1
      vars:
        WORKSPACE: "ios/App/App.xcworkspace"
        PROJECT: "ios/App/App.xcodeproj"
        SCHEME: "App"
        CONFIGURATION: "Release"

        DEVELOPMENT_TEAM: "QZ55W58398"
        PRODUCT_BUNDLE_IDENTIFIER: "com.fireopscalc.app"

        ARCHIVE_PATH: "/Users/builder/clone/build/App.xcarchive"
        EXPORT_DIR: "/Users/builder/clone/Export/export_tmp"
        IPA_EXPORT_DIR: "/Users/builder/clone/Export"
        IPA_NAME: "FireOpsCalc.ipa"

      ios_signing:
        certificates:
          - FireCalcCertiicate
        provisioning_profiles:
          - FireOpsCalcprofile

    scripts:
      - name: Install Node deps & build web
        script: |
          if [ -f package.json ]; then
            npm ci || npm install
            npm run build --if-present
          else
            echo "No package.json ‚Äî skipping web build."
          fi

      - name: Capacitor sync iOS
        script: |
          if [ -f capacitor.config.ts ] || [ -f capacitor.config.json ] || [ -f capacitor.config.js ]; then
            npx cap sync ios
          else
            echo "No capacitor.config.* found ‚Äî assuming native already present."
          fi
          ls -la ios/App/App/ || true

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod install --repo-update || pod install
          cd ../..

      # 1) TRY TO GET PROFILES FROM CODemagic MOUNT
      - name: Ensure signing files are present
        script: |
          echo "CM_PROVISIONING_PROFILES_DIR = '$CM_PROVISIONING_PROFILES_DIR'"
          HAS_PROFILES=0
          if [ -n "$CM_PROVISIONING_PROFILES_DIR" ] && [ -d "$CM_PROVISIONING_PROFILES_DIR" ] && [ -n "$(ls -A "$CM_PROVISIONING_PROFILES_DIR" 2>/dev/null)" ]; then
            echo "‚úÖ Found mounted provisioning profiles:"
            ls -la "$CM_PROVISIONING_PROFILES_DIR"
            HAS_PROFILES=1
          else
            echo "‚ö†Ô∏è No mounted profiles ‚Äî will try to fetch from App Store Connect..."
          fi

          if [ $HAS_PROFILES -eq 0 ]; then
            # 2) TRY TO FETCH FROM APP STORE CONNECT
            # These env vars are created by Codemagic when you set the integration.
            if [ -z "$APP_STORE_CONNECT_ISSUER_ID" ] || [ -z "$APP_STORE_CONNECT_KEY_IDENTIFIER" ] || [ -z "$APP_STORE_CONNECT_PRIVATE_KEY" ]; then
              echo "‚ùå App Store Connect integration missing or invalid."
              echo "‚û°Ô∏è Go to Codemagic > Integrations > App Store Connect (FireCalc) and upload a VALID .p8, and make sure Issuer ID + Key ID are set."
              exit 1
            fi

            # make dirs if missing
            SIGNING_DIR="${CM_PROVISIONING_PROFILES_DIR:-/Users/builder/signing}"
            mkdir -p "$SIGNING_DIR"

            # try to fetch
            set -e
            app-store-connect fetch-signing-files \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --bundle-id "$PRODUCT_BUNDLE_IDENTIFIER" \
              --type IOS_APP_STORE \
              --certificate-key "/tmp/cert_key.p12" \
              --profiles-dir "$SIGNING_DIR" || {
                echo "‚ùå Failed to fetch from App Store Connect."
                echo "Most common causes:"
                echo "  1) The .p8 you uploaded is not a REAL App Store Connect API key (Codemagic log: 'not a valid PEM')"
                echo "  2) The key was revoked in Apple and not updated in Codemagic"
                echo "  3) The key DOES NOT have 'Developer ID' / 'App Manager' rights to create/download certs"
                exit 1
              }

            echo "‚úÖ Fetched signing files into $SIGNING_DIR"
            export CM_PROVISIONING_PROFILES_DIR="$SIGNING_DIR"
          fi

      # 3) APPLY PROFILE TO PROJECT
      - name: Apply profile to Xcode project
        script: |
          FILE="ios/App/App.xcodeproj/project.pbxproj"
          echo "---- BEFORE ----"
          grep -n "ProvisioningStyle" "$FILE" || true
          grep -n "PROVISIONING_PROFILE" "$FILE" || true

          # clean old manual junk
          perl -pi -e 's/ProvisioningStyle = Manual;/ProvisioningStyle = Automatic;/g' "$FILE"
          perl -pi -e 's/PROVISIONING_PROFILE_SPECIFIER = .*;//g' "$FILE"
          perl -pi -e 's/PROVISIONING_PROFILE = .*;//g' "$FILE"

          # now actually inject what Codemagic fetched
          if command -v xcode-project >/dev/null 2>&1; then
            xcode-project use-profiles \
              --project "ios/App/App.xcodeproj" \
              --scheme "App" \
              --export-method app-store-connect \
              --profiles-dir "$CM_PROVISIONING_PROFILES_DIR" \
              --team-id "$DEVELOPMENT_TEAM"
          else
            echo "‚ö†Ô∏è xcode-project tool missing, skipping automatic inject."
          fi

          echo "---- AFTER ----"
          grep -n "ProvisioningStyle" "$FILE" || true
          grep -n "PROVISIONING_PROFILE" "$FILE" || true

      - name: Make ExportOptions.plist
        script: |
          EXPORT_PLIST="/Users/builder/ExportOptions.plist"
          rm -f "$EXPORT_PLIST"
          /usr/bin/plutil -create xml1 "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :method string app-store-connect" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :signingStyle string manual" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :teamID string $DEVELOPMENT_TEAM" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" "$EXPORT_PLIST"
          # we don't know exact profile filename, so just map by bundle id to "FireOpsCalcprofile"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$PRODUCT_BUNDLE_IDENTIFIER string FireOpsCalcprofile" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :compileBitcode bool false" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Add :uploadSymbols bool true" "$EXPORT_PLIST"
          /usr/libexec/PlistBuddy -c "Print" "$EXPORT_PLIST"

      - name: üì¶ Archive
        script: |
          set -e
          rm -rf "$ARCHIVE_PATH"

          xcodebuild -list -workspace "$WORKSPACE" || true

          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination 'generic/platform=iOS' \
            -archivePath "$ARCHIVE_PATH" \
            archive

      - name: üöÄ Export IPA
        script: |
          set -e
          mkdir -p "$EXPORT_DIR" "$IPA_EXPORT_DIR"

          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "/Users/builder/ExportOptions.plist" \
            -exportPath "$EXPORT_DIR"

          IPA_PATH="$(ls -1t "$EXPORT_DIR"/*.ipa 2>/dev/null | head -n 1)"
          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå Export did not produce an IPA. Contents of $EXPORT_DIR:"
            ls -la "$EXPORT_DIR" || true
            exit 1
          fi

          mv -f "$IPA_PATH" "$IPA_EXPORT_DIR/$IPA_NAME"
          echo "‚úÖ Exported: $IPA_EXPORT_DIR/$IPA_NAME"

    artifacts:
      - "/Users/builder/clone/Export/FireOpsCalc.ipa"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testers
