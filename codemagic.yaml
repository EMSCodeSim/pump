workflows:
  ios-capacitor:
    name: iOS Capacitor ‚Üí TestFlight (auto-create signing)
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      node: 20
      xcode: latest
      cocoapods: default
      groups:
        - app_store_credentials   # must contain:
                                  # APP_STORE_CONNECT_KEY_IDENTIFIER
                                  # APP_STORE_CONNECT_ISSUER_ID
                                  # APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        APP_IDENTIFIER: com.fireopscalc.app   # <-- your bundle id
        XCODE_SCHEME: App                     # <-- change if your scheme differs

    scripts:
      - name: Install dependencies
        script: |
          echo "Node:" && node -v
          npm ci || npm install --legacy-peer-deps

      - name: Build web assets to dist/
        script: |
          npm run build || true
          if [ ! -f "dist/index.html" ]; then
            mkdir -p dist
            if [ -f "index.html" ]; then
              cp index.html dist/index.html
            else
              echo "dist/index.html missing and no root index.html to copy"; exit 1
            fi
          fi

      - name: Ensure iOS platform exists & sync Capacitor
        script: |
          [ -d ios ] || npx cap add ios
          npx cap sync ios

      - name: Generate cert private key (for new Distribution cert)
        script: |
          CERT_KEY_PATH="$CM_BUILD_DIR/cert_private.key"
          openssl genrsa -out "$CERT_KEY_PATH" 2048
          echo "CERT_KEY_PATH=$CERT_KEY_PATH" >> $CM_ENV
          echo "Created CI certificate private key."

      - name: Fetch signing files from App Store Connect (auto-create)
        script: |
          # Your runner expects positional bundle id + global auth flags.
          app-store-connect fetch-signing-files "$APP_IDENTIFIER" \
            --type IOS_APP_STORE \
            --platform IOS \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --certificate-key "@file:$CERT_KEY_PATH" \
            --p12-password "" \
            --create \
            --delete-stale-profiles \
            --verbose

      - name: Initialize keychain & install certs/profiles
        script: |
          keychain initialize
          keychain add-certificates

      - name: (Debug) Show schemes & critical build settings
        script: |
          set -o pipefail
          xcodebuild -list -workspace "ios/App/App.xcworkspace" || true
          echo "----- SHOW BUILD SETTINGS (Release) -----"
          xcodebuild -showBuildSettings \
            -workspace "ios/App/App.xcworkspace" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release | egrep "PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE|SUPPORTED_PLATFORMS|SDKROOT" || true

      - name: Create ExportOptions.plist (app-store, automatic)
        script: |
          PLIST_PATH="$CM_BUILD_DIR/export_options.plist"
          cat > "$PLIST_PATH" <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>automatic</string>
            <key>stripSwiftSymbols</key><true/>
            <key>uploadSymbols</key><true/>
            <key>manageAppVersionAndBuildNumber</key><false/>
          </dict>
          </plist>
          PLIST
          echo "ExportOptions at: $PLIST_PATH"

      - name: Archive (force iOS destination)
        script: |
          set -o pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          echo "üèó  Archiving with destination 'generic/platform=iOS'..."
          xcodebuild \
            -workspace "ios/App/App.xcworkspace" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            CODE_SIGN_STYLE=Automatic \
            COMPILER_INDEX_STORE_ENABLE=NO | xcpretty && exit ${PIPESTATUS[0]}

      - name: Export IPA
        script: |
          set -o pipefail
          IPA_OUT_DIR="$CM_BUILD_DIR/ipa"
          mkdir -p "$IPA_OUT_DIR"
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/export_options.plist" \
            -exportPath "$IPA_OUT_DIR" | xcpretty && exit ${PIPESTATUS[0]}
          ls -la "$IPA_OUT_DIR"

      - name: Publish to TestFlight
        script: |
          IPA_PATH="$(find "$CM_BUILD_DIR/ipa" -name '*.ipa' | head -n 1)"
          if [ -z "$IPA_PATH" ]; then
            echo "No .ipa found to upload"; exit 1
          fi
          echo "üöÄ Uploading $IPA_PATH to TestFlight‚Ä¶"
          app-store-connect publish \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
            --path "$IPA_PATH" \
            --submit-to-testflight

    artifacts:
      - "**/*.ipa"
      - "ios/App/build/**"
