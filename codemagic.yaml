workflows:
  ios_release:
    name: iOS Release (App Store / TestFlight)
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      node: 20.11.1          # Capacitor v6 requires Node >= 20
      cocoapods: default

      # Your secure Apple vars live in this group:
      groups:
        - ios-signing        # APP_STORE_CONNECT_* variables

      vars:
        BUNDLE_ID: "com.fireopscalc.app"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"

      # Automatic signing (uses Team → iOS certificates / profiles you set up)
      ios_signing:
        distribution_type: app_store
        bundle_identifier: "$BUNDLE_ID"

    cache:
      cache_paths:
        - ~/.npm
        - ~/.cache/CocoaPods
        - ios/App/Pods

    scripts:
      - name: Show tool versions
        script: |
          echo "node: $(node -v)"
          echo "npm:  $(npm -v)"
          echo "npx:  $(npx --version)"

      - name: Install dependencies
        script: npm ci

      - name: Build web assets (try common scripts; skip if none)
        script: |
          echo "Available npm scripts:"
          node -e "try{const s=require('./package.json').scripts||{};console.log(Object.keys(s).join(', ')||'(none)')}catch(e){console.log('(no package.json)')}"
          (
            npm run build \
            || npm run build:web \
            || npm run ionic:build \
            || npm run prod \
            || npm run production \
            || npm run compile
          ) || echo "No web build script found; continuing without web asset build."

      - name: Sync Capacitor iOS
        script: npx cap sync ios

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod install --repo-update

      - name: Build iOS archive (Release)
        script: |
          ARCHIVE_PATH="$CM_BUILD_DIR/build/App.xcarchive"
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            clean archive | xcpretty
          echo "Archive created at: $ARCHIVE_PATH"

      - name: Export IPA (App Store)
        script: |
          EXPORT_PLIST="$CM_BUILD_DIR/exportOptions.plist"
          cat > "$EXPORT_PLIST" <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>automatic</string>
            <key>stripSwiftSymbols</key><true/>
            <key>uploadSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>manageAppVersionAndBuildNumber</key><true/>
          </dict>
          </plist>
          EOF

          EXPORT_DIR="$CM_BUILD_DIR/tmp_export"
          mkdir -p "$EXPORT_DIR"
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/build/App.xcarchive" \
            -exportOptionsPlist "$EXPORT_PLIST" \
            -exportPath "$EXPORT_DIR" | xcpretty

          echo "Export directory contents:"
          ls -R "$EXPORT_DIR" || true

          # ✅ Ensure IPA ends up under build/ipa/ so Codemagic always finds it
          FINAL_DIR="$CM_BUILD_DIR/build/ipa"
          mkdir -p "$FINAL_DIR"
          IPA_PATH="$(find "$EXPORT_DIR" -maxdepth 2 -name '*.ipa' | head -n 1)"
          if [ -n "$IPA_PATH" ]; then
            cp "$IPA_PATH" "$FINAL_DIR/"
            echo "IPA copied to: $FINAL_DIR"
          else
            echo "No .ipa found in export; failing step."
            exit 1
          fi

    artifacts:
      - build/ipa/*.ipa
      - build/App.xcarchive
      # Extra safety: if Xcode wrote archives elsewhere, also try the default folder
      - $HOME/Library/Developer/Xcode/Archives/**/*.xcarchive

    publishing:
      app_store_connect:
        # Use ONE of these depending on your variable:
        # If the variable holds the RAW PEM (multiline with BEGIN/END):
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        # If instead it holds Base64, comment the line above and use this:
        # api_key_base64: $APP_STORE_CONNECT_PRIVATE_KEY

        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
